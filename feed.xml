<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://recoma96.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://recoma96.github.io/" rel="alternate" type="text/html" /><updated>2025-02-13T02:27:57+00:00</updated><id>https://recoma96.github.io/feed.xml</id><title type="html">Recoma In DEV</title><entry><title type="html">Factory Boy를 이용해 테스트 데이터를 깔끔하게 만들어 보자</title><link href="https://recoma96.github.io/testing/2025/01/22/factory-boy.html" rel="alternate" type="text/html" title="Factory Boy를 이용해 테스트 데이터를 깔끔하게 만들어 보자" /><published>2025-01-22T00:30:00+00:00</published><updated>2025-01-22T00:30:00+00:00</updated><id>https://recoma96.github.io/testing/2025/01/22/factory-boy</id><content type="html" xml:base="https://recoma96.github.io/testing/2025/01/22/factory-boy.html"><![CDATA[<h1 id="factory-boy">Factory Boy</h1>

<p>테스트코드를 작성하다 보면, 테스트를 시작하기 전에 데이터베이스에 테스트용 데이터를 집어넣는 과정을 거친다. 보통은 ORM으로 데이터들을 생성하기 때문에 가끔 이런 코드를 볼 수가 있다. <em>(Django 기준)</em></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">setUp</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
    <span class="n">self</span><span class="p">.</span><span class="n">user</span> <span class="o">=</span> <span class="n">User</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span>
        <span class="n">readable_id</span><span class="o">=</span><span class="sh">"</span><span class="s">G1234512345</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">customer_key</span><span class="o">=</span><span class="sh">"</span><span class="s">6d1fb2d032214636900ec93b94674d74</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">name</span><span class="o">=</span><span class="sh">"</span><span class="s">userName</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">email</span><span class="o">=</span><span class="sh">"</span><span class="s">email@gmail.com</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">gender</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span>
        <span class="n">phone_number</span><span class="o">=</span><span class="sh">"</span><span class="s">01012341234</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">birth_date</span><span class="o">=</span><span class="sh">"</span><span class="s">19990101</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">user_sns_id</span><span class="o">=</span><span class="sh">"</span><span class="s">user_sns_id</span><span class="sh">"</span><span class="p">,</span>
    <span class="p">)</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">name</code>이나 <code class="language-plaintext highlighter-rouge">email</code>같은 테스트 목적이 있는 데이터들을 제외한 나머지 데이터들은 그냥 임의로 적어 놓았음을 알 수 있다. 즉, 테스트에 필요하지 않아 랜덤으로 돌려도 되는 값들을 일일이 리터럴하게 집어넣은 것이다. 이런 식으로 진행하게 되면, 쓸떼없는 코드가 많아져 전체적으로 코드가 더럽게 보일게 뻔하다. 이를 해결하기 위한 라이브러리가 바로 <strong>factory_boy</strong> 이다.</p>

<p><strong>factory_boy</strong>는 테스트시 필요한 값들을 랜덤하게 생성하는 역할을 한다. 그런데 그냥 아무 랜덤값을 주는 게 아니라, <strong>테마에 따라 다른 형태의 값을 주는데</strong>, 예를 들어 임의의 이름이 필요하다 하면 Mario나 Luigi 같은 랜덤으로 돌린  이름을 주고, 주소를 요청하면 주소와 관련되게 임의값을 준다.</p>

<h1 id="설치">설치</h1>

<p>factory_boy 라는 라이브러리를 설치하는 것이기 때문에 방법은 간단하다.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>pip <span class="nb">install </span>factory_boy
</code></pre></div></div>

<h1 id="사용법">사용법</h1>

<h2 id="일반-사용법---faker-객체-활용하기">일반 사용법 -&gt; Faker 객체 활용하기</h2>

<p>일반적인 사용법이라 함은 그냥 단순히 랜덤값 하나를 불러오는 것을 의미한다. 이 사용법은 매우 간단하다. 몇줄만 추가하면 되기 때문이다.</p>

<p><code class="language-plaintext highlighter-rouge">faker</code>를 import 하고 <code class="language-plaintext highlighter-rouge">Faker</code> 객체를 하나 만든다. 그 다음에 그 객체에서 내가 원하는 랜덤값 이름의 함수를 사용하면 된다. 예를 들어 내가 이름과 관련된 랜덤값을 원한다면, <code class="language-plaintext highlighter-rouge">.name()</code> 또는  <code class="language-plaintext highlighter-rouge">.user_name()</code>을 사용하면 된다.</p>

<blockquote>
  <p>단, <code class="language-plaintext highlighter-rouge">name()</code>과 <code class="language-plaintext highlighter-rouge">user_name()</code>의 차이점이라면, <code class="language-plaintext highlighter-rouge">name()</code>은 실제 사람의 이름으로 성과 이름이 분리되서 나오고 <code class="language-plaintext highlighter-rouge">user_name()</code>은 게임에서 나오는 게임유저 이름 정도만 생각하면 된다.</p>
</blockquote>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">faker</span> <span class="kn">import</span> <span class="n">Faker</span>

<span class="n">fake</span> <span class="o">=</span> <span class="nc">Faker</span><span class="p">()</span>

<span class="n">fake</span><span class="p">.</span><span class="nf">name</span><span class="p">()</span> <span class="c1"># Shawn Miller
</span><span class="n">fake</span><span class="p">.</span><span class="nf">user_name</span><span class="p">()</span> <span class="c1"># Miller
</span></code></pre></div></div>

<p>이름 말고도 다른 테마로도 가능하다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">fake</span><span class="p">.</span><span class="nf">date_time</span><span class="p">()</span> <span class="c1"># datetime 타입의 랜덤 날짜
</span><span class="n">fake</span><span class="p">.</span><span class="nf">sentence</span><span class="p">()</span> <span class="c1"># 영어 1문장: General apply international possible old fear.
</span></code></pre></div></div>

<p>그렇다면 아까 위에 제시했던 유저 생성 코드를 아래와 같이 변경할 수 있다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">faker</span> <span class="kn">import</span> <span class="n">Faker</span>

<span class="k">def</span> <span class="nf">setUp</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
    <span class="n">fake</span> <span class="o">=</span> <span class="nc">Faker</span><span class="p">()</span>
    <span class="n">self</span><span class="p">.</span><span class="n">user</span> <span class="o">=</span> <span class="n">User</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span>
        <span class="n">readable_id</span><span class="o">=</span><span class="sa">f</span><span class="sh">"</span><span class="s">G</span><span class="si">{</span><span class="n">fake</span><span class="p">.</span><span class="nf">random_digit</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span><span class="si">}</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">customer_key</span><span class="o">=</span><span class="n">fake</span><span class="p">.</span><span class="nf">uuid4</span><span class="p">(),</span>
        <span class="n">name</span><span class="o">=</span><span class="n">fake</span><span class="p">.</span><span class="nf">user_name</span><span class="p">(),</span>
        <span class="n">email</span><span class="o">=</span><span class="n">fake</span><span class="p">.</span><span class="nf">email</span><span class="p">(),</span>
        <span class="n">gender</span><span class="o">=</span><span class="n">fake</span><span class="p">.</span><span class="nf">random_int</span><span class="p">(</span><span class="nb">min</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="nb">max</span><span class="o">=</span><span class="mi">1</span><span class="p">),</span>
        <span class="n">phone_number</span><span class="o">=</span><span class="n">fake</span><span class="p">.</span><span class="nf">phone_number</span><span class="p">(),</span>
        <span class="n">birth_date</span><span class="o">=</span><span class="nf">str</span><span class="p">(</span><span class="n">fake</span><span class="p">.</span><span class="nf">ramdon_digit</span><span class="p">(</span><span class="mi">19900000</span><span class="p">,</span> <span class="mi">20241231</span><span class="p">)),</span>
        <span class="n">user_sns_id</span><span class="o">=</span><span class="nf">str</span><span class="p">(</span><span class="n">fake</span><span class="p">.</span><span class="nf">random_digit</span><span class="p">(</span><span class="mi">20</span><span class="p">)),</span>
    <span class="p">)</span>
</code></pre></div></div>
<p>일단 <strong>상수값들이 사라졌다.</strong> 이제 임의 데이터 생성은 factory boy에서 알아서 해주기 때문이다. 하지만… 뭔가 코드가 더러운건 똑같아 보인다. 그리고 테스트 유저 생성을 이 한 테스트 파일 뿐만 아니라 여러 테스트 파일에도 사용이 될 텐데 이렇게 되면 또 똑같은 식의 코드를 작성해야 한다. 이때 factory boy는 <strong>factory.Factory를 사용함을 제안한다.</strong></p>

<h2 id="factoryfactory">factory.Factory</h2>

<p>이전에 서술했던 <code class="language-plaintext highlighter-rouge">fake.Faker</code>가 단순히 랜덤값을 생성시키는 역할을 한 다면, <code class="language-plaintext highlighter-rouge">factory.Factory</code>는 랜덤값들을 생성함은 물론 <strong>테스트용 데이터베이스에 까지 친절하게 데이터를 저장해 주는 역할을 한다.</strong> 예를 들어 테스트용 <code class="language-plaintext highlighter-rouge">User</code>데이터를 데이터베이스 저장한다고 할때, <code class="language-plaintext highlighter-rouge">factory.Factory</code>를 상속한 <code class="language-plaintext highlighter-rouge">UserFactory</code>를 구현한 다음에 <code class="language-plaintext highlighter-rouge">UserFactory.create()</code>만 작성해 주면 알아서 데이터베이스를 저장해 주고, ORM 인스턴스를 내뱉는다. 사용법은 아래와 같다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># factory.py
</span>
<span class="kn">import</span> <span class="n">factory</span>


<span class="k">class</span> <span class="nc">ProfileFactory</span><span class="p">(</span><span class="n">factory</span><span class="p">.</span><span class="n">django</span><span class="p">.</span><span class="n">DjangoModelFactory</span><span class="p">)</span>
    <span class="k">class</span> <span class="nc">Meta</span><span class="p">:</span>
        <span class="n">model</span> <span class="o">=</span> <span class="n">Profile</span>
    <span class="p">...</span> <span class="n">이하</span> <span class="n">생략</span> <span class="bp">...</span>


<span class="k">class</span> <span class="nc">UserFactory</span><span class="p">(</span><span class="n">factory</span><span class="p">.</span><span class="n">django</span><span class="p">.</span><span class="n">DjangoModelFactory</span><span class="p">):</span>
    <span class="k">class</span> <span class="nc">Meta</span><span class="p">:</span>
        <span class="n">model</span> <span class="o">=</span> <span class="n">User</span>

    <span class="n">readable_id</span> <span class="o">=</span> <span class="n">factory</span><span class="p">.</span><span class="nc">LazyFunction</span><span class="p">(</span><span class="k">lambda</span><span class="p">:</span> <span class="nf">str</span><span class="p">(</span><span class="nf">uuid4</span><span class="p">())[:</span><span class="mi">10</span><span class="p">])</span>
    <span class="n">customer_key</span> <span class="o">=</span> <span class="n">factory</span><span class="p">.</span><span class="nc">Faker</span><span class="p">(</span><span class="sh">"</span><span class="s">uuid4</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">user_sns_id</span> <span class="o">=</span> <span class="n">factory</span><span class="p">.</span><span class="nc">LazyFunction</span><span class="p">(</span><span class="k">lambda</span><span class="p">:</span> <span class="nf">str</span><span class="p">(</span><span class="nf">uuid4</span><span class="p">())[:</span><span class="mi">10</span><span class="p">])</span>
    <span class="n">name</span> <span class="o">=</span> <span class="n">factory</span><span class="p">.</span><span class="nc">Faker</span><span class="p">(</span><span class="sh">"</span><span class="s">user_name</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">email</span> <span class="o">=</span> <span class="n">factory</span><span class="p">.</span><span class="nc">Faker</span><span class="p">(</span><span class="sh">"</span><span class="s">email</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">gender</span> <span class="o">=</span> <span class="n">factory</span><span class="p">.</span><span class="nc">LazyFunction</span><span class="p">(</span><span class="k">lambda</span><span class="p">:</span> <span class="n">random</span><span class="p">.</span><span class="nf">choice</span><span class="p">([</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">]))</span>
    <span class="n">phone_number</span> <span class="o">=</span> <span class="n">factory</span><span class="p">.</span><span class="nc">Faker</span><span class="p">(</span><span class="sh">"</span><span class="s">phone_number</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">birth_date</span> <span class="o">=</span> <span class="sh">"</span><span class="s">990101</span><span class="sh">"</span>
    <span class="n">is_staff</span> <span class="o">=</span> <span class="n">factory</span><span class="p">.</span><span class="nc">LazyAttribute</span><span class="p">(</span><span class="k">lambda</span> <span class="n">e</span><span class="p">:</span> <span class="n">e</span><span class="p">.</span><span class="n">is_staff</span><span class="p">)</span>
    <span class="n">profile</span> <span class="o">=</span> <span class="n">factory</span><span class="p">.</span><span class="nc">SubFactory</span><span class="p">(</span><span class="n">ProfileFactory</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># test.py
</span>
<span class="k">class</span> <span class="nc">UserTestCase</span><span class="p">(</span><span class="n">APITestCaese</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">setUp</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="n">fake</span> <span class="o">=</span> <span class="nc">Faker</span><span class="p">()</span>
        <span class="n">self</span><span class="p">.</span><span class="n">profile</span> <span class="o">=</span> <span class="n">ProfileFactory</span><span class="p">.</span><span class="nf">create</span><span class="p">()</span>
        <span class="n">self</span><span class="p">.</span><span class="n">user</span> <span class="o">=</span> <span class="n">UserFactory</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span>
            <span class="n">is_staff</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span>
            <span class="n">profile</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">profile</span><span class="p">,</span>
        <span class="p">)</span>
</code></pre></div></div>

<p>위의 <code class="language-plaintext highlighter-rouge">UserFactory</code>를 정의하는 코드에서 여러 가지의 <code class="language-plaintext highlighter-rouge">factory</code>쪽 함수를 사용하고 있는데 설명하자면 아래와 같다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">name</span> <span class="o">=</span> <span class="n">factory</span><span class="p">.</span><span class="nc">Faker</span><span class="p">(</span><span class="sh">"</span><span class="s">user_name</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">factory.Faker</code>는 가장 기본적으로 쓰이는 함수로, 아까 설명했던 <code class="language-plaintext highlighter-rouge">Faker</code>쪽 함수와 기능이 같다고 보면 된다. 다른 점이 있다면 <code class="language-plaintext highlighter-rouge">Faker</code>에서의 함수 이름이, <code class="language-plaintext highlighter-rouge">factory.Faker</code>에서는 문자열 파라미터로 쓰인다는 것이다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">readable_id</span> <span class="o">=</span> <span class="n">factory</span><span class="p">.</span><span class="nc">LazyFunction</span><span class="p">(</span><span class="k">lambda</span><span class="p">:</span> <span class="nf">str</span><span class="p">(</span><span class="nf">uuid4</span><span class="p">())[:</span><span class="mi">10</span><span class="p">])</span>
</code></pre></div></div>

<p>하지만 <code class="language-plaintext highlighter-rouge">factory.Faker</code>로는 랜덤 생성이 불가능한 상황이 있다. 예를 들어 UUID를 랜덤으로 돌리는 것은 <code class="language-plaintext highlighter-rouge">factory.Faker("uuid4")</code>로 해결이 가능하지만, 랜덤으로 돌린 다음, 앞의 10자를 제외한 나머지 문자열을 제거하는 것 까지는 할 수가 없다. 이때는 랜덤 함수를 직접 만들어야 하는데, <code class="language-plaintext highlighter-rouge">factory.LazyFunction</code>이 이를 가능하게 해준다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">is_staff</span> <span class="o">=</span> <span class="n">factory</span><span class="p">.</span><span class="nc">LazyAttribute</span><span class="p">(</span><span class="k">lambda</span> <span class="n">e</span><span class="p">:</span> <span class="n">e</span><span class="p">.</span><span class="n">is_staff</span><span class="p">)</span>

<span class="c1"># test.py
</span><span class="n">UserFactory</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span><span class="n">is_staff</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
</code></pre></div></div>
<p>일부 요소들은 반드시 랜덤으로 돌려서는 안되고 개발자가 반드시 값을 지정해 줘야 할 있다. 이때 <code class="language-plaintext highlighter-rouge">LazyAttribute</code>를 사용한다. 파라미터로 익명 함수(<code class="language-plaintext highlighter-rouge">lambda</code>)를 사용함으로써 개발자가 굳이 별도의 로직을 구현할 필요 없이 입력 데이터를 가공해서 저장할 수도 있다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">birth_date</span> <span class="o">=</span> <span class="sh">"</span><span class="s">990101</span><span class="sh">"</span>
</code></pre></div></div>

<p>랜덤을 돌리지 않고 그냥 고정시키고 싶다면 이렇게 네이티브 하게 작성하면 된다. 물론, <code class="language-plaintext highlighter-rouge">create</code>에서 필요시 데이터를 변경할 수 도 있다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">ProfileFactory</span><span class="p">(</span><span class="n">factory</span><span class="p">.</span><span class="n">django</span><span class="p">.</span><span class="n">DjangoModelFactory</span><span class="p">)</span>
    <span class="k">class</span> <span class="nc">Meta</span><span class="p">:</span>
        <span class="n">model</span> <span class="o">=</span> <span class="n">Profile</span>
    <span class="p">...</span> <span class="n">이하</span> <span class="n">생략</span> <span class="bp">...</span>

<span class="k">class</span> <span class="nc">UserFactory</span><span class="p">(</span><span class="n">factory</span><span class="p">.</span><span class="n">django</span><span class="p">.</span><span class="n">DjangoModelFactory</span><span class="p">)</span>
    <span class="k">class</span> <span class="nc">Meta</span><span class="p">:</span>
        <span class="n">model</span> <span class="o">=</span> <span class="n">User</span>
    <span class="n">profile</span> <span class="o">=</span> <span class="n">factory</span><span class="p">.</span><span class="nc">SubFactory</span><span class="p">(</span><span class="n">ProfileFactory</span><span class="p">)</span>
</code></pre></div></div>

<p>데이터 저장 시, 관계되어 있는 자식 테이블의 데이터가 필요할 때가 있다. 이때 <code class="language-plaintext highlighter-rouge">factory.SubFactory</code>를 사용한다.</p>

<h2 id="부록-factory_boy에서-사용할-수-있는-필드-리스트">부록) factory_boy에서 사용할 수 있는 필드 리스트</h2>

<table>
  <thead>
    <tr>
      <th>필드명</th>
      <th>설명</th>
      <th>필드명</th>
      <th>설명</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>name</td>
      <td>실제 이름</td>
      <td>user_name</td>
      <td>이름(닉네임)</td>
    </tr>
    <tr>
      <td>email</td>
      <td>이메일 주소</td>
      <td>phone_number</td>
      <td>전화번호</td>
    </tr>
    <tr>
      <td>address</td>
      <td>주소</td>
      <td>date</td>
      <td>날짜</td>
    </tr>
    <tr>
      <td>date_time</td>
      <td>날짜 및 시간(<code class="language-plaintext highlighter-rouge">datetime</code>)</td>
      <td>time</td>
      <td>시간</td>
    </tr>
    <tr>
      <td>credit_card_number</td>
      <td>신용카드 번호</td>
      <td>credit_card_expire</td>
      <td>신용카드 만료일</td>
    </tr>
    <tr>
      <td>text</td>
      <td>랜덤 텍스트</td>
      <td>sentence</td>
      <td>1문장</td>
    </tr>
    <tr>
      <td>paragraph</td>
      <td>1문단(여러문장)</td>
      <td>url</td>
      <td>URL</td>
    </tr>
    <tr>
      <td>uuid4</td>
      <td>UUID</td>
      <td>color_name</td>
      <td>색상이름</td>
    </tr>
    <tr>
      <td>random_int(<code class="language-plaintext highlighter-rouge">min: int, max: int</code>)</td>
      <td>랜덤 정수</td>
      <td>random_number(<code class="language-plaintext highlighter-rouge">k</code>)</td>
      <td>K자리 랜덤 숫자</td>
    </tr>
    <tr>
      <td>random_element(<code class="language-plaintext highlighter-rouge">elements: list</code>)</td>
      <td><code class="language-plaintext highlighter-rouge">elements</code> 중에 하나 랜덤</td>
      <td> </td>
      <td> </td>
    </tr>
  </tbody>
</table>]]></content><author><name></name></author><category term="Testing" /><category term="python" /><category term="testing" /><category term="factory_boy" /><summary type="html"><![CDATA[Factory Boy]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://recoma96.github.io/" /><media:content medium="image" url="https://recoma96.github.io/" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">AWS Configure 여러개로 관리하기</title><link href="https://recoma96.github.io/aws/2025/01/15/aws-configure-profile.html" rel="alternate" type="text/html" title="AWS Configure 여러개로 관리하기" /><published>2025-01-15T05:00:00+00:00</published><updated>2025-01-15T05:00:00+00:00</updated><id>https://recoma96.github.io/aws/2025/01/15/aws-configure-profile</id><content type="html" xml:base="https://recoma96.github.io/aws/2025/01/15/aws-configure-profile.html"><![CDATA[<h1 id="개요">개요</h1>

<p>내가 다니고 있는 회사에는 두 개의 서비스를 관리하고 있고, 각 서비스 마다 서로 다른 AWS 계정을 가지고 있다.
나는 두 개의 서비스 중 하나는 전체 관리를 다른 하나는 일부 참여를 하고 있기 때문에 두 개의 AWS 계정을 사용해야 했다.
개발을 로컬에서 하기 때문에 어쩔 수 없이 AWS Configure를 사용해야 하는데, 매번 다른 서비스를 개발할 때마다 일일이 AWS 정보를 입력해야 하는게 여간 귀찮은게 아니다. 
그래서 리서치 결과 <code class="language-plaintext highlighter-rouge">aws configure profile</code>이라는 게 있다는 것을 알았다.</p>

<h1 id="aws-configure-profile">aws configure –profile</h1>

<p>프로필을 생성방법은 아래와 같다.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>aws configure <span class="nt">--profile</span> &lt;ProfileName&gt;
AWS Access Key ID <span class="o">[</span><span class="k">********************</span><span class="o">]</span>:
AWS Secret Access Key <span class="o">[</span><span class="k">********************</span><span class="o">]</span>:
Default region name <span class="o">[</span>ap-northeast-2]:
Default output format <span class="o">[</span>json]:
</code></pre></div></div>

<p><br /></p>

<p>그리고 아래와 같은 명령어로 s3를 불러올 수 있다.</p>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>aws s3 <span class="nb">ls</span> <span class="nt">--profile</span> &lt;ProfileName&gt;
</code></pre></div></div>

<p><br /></p>

<p>아래의 명령어로 프로파일의 정보를 출력할 수 있다. 아, 물론 엑세스 키와 시크릿 키는 당연히 마스킹 되어 있다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ aws configure list

      Name                    Value             Type    Location
      ----                    -----             ----    --------
   profile                &lt;not set&gt;             None    None
access_key     ****************xxxx shared-credentials-file    
secret_key     ****************xxxx shared-credentials-file    
    region           ap-northeast-2      config-file    ~/.aws/config
</code></pre></div></div>

<p>그런데 Pycharm 또는 VSCode IDE에서 사용할 경우 어느 Profile을 사용할 건지 고정을 하고 사용해야 한다. 이때는 환경변수로 세팅을 해서 사용한다.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">export </span><span class="nv">AWS_DEFAULT_PROFILE</span><span class="o">=</span>&lt;ProfileName&gt;
</code></pre></div></div>]]></content><author><name></name></author><category term="AWS" /><category term="aws" /><category term="iam" /><category term="aws_configure" /><summary type="html"><![CDATA[개요]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://recoma96.github.io/" /><media:content medium="image" url="https://recoma96.github.io/" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">IAM Role이란?</title><link href="https://recoma96.github.io/aws/2025/01/14/iam-role.html" rel="alternate" type="text/html" title="IAM Role이란?" /><published>2025-01-14T23:30:00+00:00</published><updated>2025-01-14T23:30:00+00:00</updated><id>https://recoma96.github.io/aws/2025/01/14/iam-role</id><content type="html" xml:base="https://recoma96.github.io/aws/2025/01/14/iam-role.html"><![CDATA[<h1 id="개요">개요</h1>

<blockquote>
  <p>IAM</p>
</blockquote>

<p>AWS 입문을 해 봤다면 <strong>IAM</strong> 이라는 단어는 자주 들어봤을 것이다. IAM은 사용자 또는 AWS 사용 권한에 대한 관리를 하는 웹 서비스로
보통 사용자를 생성할 때 해당 서비스를 사용하는 것을 볼 수가 있다. IAM 에도 여러가지 세분화가 되어 있는데. 이중에 IAM User는 사용자를 관리하는 항목이다.</p>

<h2 id="iam-user와-aws-configure를-이용한-aws-접근">IAM User와 AWS Configure를 이용한 AWS 접근</h2>

<p>보통 웹 콘솔 말고도 내 컴퓨터나, 서버단에서 AWS 서비스를 사용해야 할 때가 있다. 이 AWS 서비스들을 사용하기 위해 사용자 인증을 하게 되는데 이때 사용되는 툴이 AWS Configure이다.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>aws configure
AWS Access Key ID <span class="o">[</span><span class="k">****************</span><span class="o">]</span>:
AWS Secret Access Key <span class="o">[</span><span class="k">****************</span><span class="o">]</span>:
... 이하 생략 ...
</code></pre></div></div>

<p>IAM에서 유저를 생성하면 그 유저에 대한 엑세스 키 아이디(Access Key ID)와 시크릿 엑세스 키(Secret Access Key)를 발행하게 되는데, 이 두개를 AWS Configure에 입력을 해야 비로소
로컬 또는 특정 EC2 서버에서 AWS CLI를 통해 웹 콘솔 없이 AWS 리소스에 접근할 수 있다. 백엔드 서버에서 모듈로 사용하는 경우, 해당 모듈을 사용하기 전에 이 두개를 등록을 해 줘야 한다. 그런데, 
로컬은 그렇다 쳐도 <strong>EC2에서 이렇게 AWS Configure로 유저 정보를 저장하면 발생하는 문제점이 몇가지 있다.</strong></p>

<ol>
  <li>파일에 저장하는 방식이기 때문에 정보가 유출될 가능성이 있다.</li>
  <li>엑세스 키에 기한이 설정되어 있는 경우, 만료됬을 때 AWS 서비스를 사용하는 프로덕트가 정상적으로 작동이 안될 수 있다.</li>
  <li>실무에서 AWS 정보의 주인이 퇴사를 하게 되면, AWS 정보를 바꿔야 하는 번거로움이 발생하게 된다.</li>
</ol>

<p>이러한 문제점 때문에 EC2에서 AWS Configure를 사용하지 않고도 AWS를 접근할 수 있는 대안이 생기게 되는데 이게 바로 <strong>IAM Role(IAM 역할)</strong> 이다.</p>

<h1 id="iam-role">IAM Role</h1>

<p>IAM User가 사용자의 권한을 의미한다면 <strong>IAM Role은 특정 AWS 서비스에서 다른 AWS 서비스에 접근하기 위한 권한을 관리하는 항목이다.</strong> 그러니까, IAM User가 “사람 대 서비스” 였다면, IAM Role은 “서비스 대 서비스” 라고 보면 된다. 예를 들어 아까 위에서 설명했던 EC2에서 S3를 접근하고 싶다고 할때, S3를 접근하는 IAM Role를 생성한 다음, 그 IAM Role을 EC2에 부착하면 된다.</p>

<h2 id="사용법">사용법</h2>

<p>이번 IAM Role 목표는, EC2에서 aws-cli로 S3에 있는 버킷과 파일들을 접근하기 위해 Role을 생성해서 EC2에 붙이려고 한다. (aws-cli는 설치가 되어 있다고 가정한다. <a href="https://docs.aws.amazon.com/ko_kr/cli/latest/userguide/getting-started-install.html">aws-cli 설치방법</a>)</p>

<h3 id="role-생성">Role 생성</h3>

<p>IAM에 들어가서 IAM resources의 Roles를 클릭한다.
<img src="/assets/img/20250115/iam-role-use-1.png" alt="" /></p>

<p><br /></p>

<p>새 Role을 만들어야 하니 Create Role을 선택한다.
<img src="/assets/img/20250115/iam-role-use-2.png" alt="" /></p>

<p><br /></p>

<p>첫번째 스탭으로 누가 이 Role을 사용하는지 선택한다. 우리는 EC2에서 S3에 접근하는 것이 목표이기 때문에 EC2를 고른다.
<img src="/assets/img/20250115/iam-role-use-3.png" alt="" /></p>

<p><br /></p>

<p>이번엔 어느 서비스를 접근하는지 골라야 한다. 우리는 S3에 있는 데이터들을 읽는게 목표이기 때문에 AmazonS3ReadOnlyAccess 를 선택한다.</p>

<p><img src="/assets/img/20250115/iam-role-use-4.png" alt="" /></p>

<blockquote>
  <p>S3에 있는 데이터들을 <strong>읽기</strong> 만 하기 때문에 가급적 ReadOnly 권한을 설정해 줘야 한다. <strong>왜냐하면 IAM에서 권한을 줄 때 딱 필요한 권한만 주는게 원칙이기 때문이다.</strong> 사실 특정 버킷을 의미하는 Resource도 모든 리소스를 조회하는 “*“가 아닌 조회하고자 하는 특정 버킷들의 arn만 작성해야 하지만 여기까지 하면 너무 길어지니 생략.</p>
</blockquote>

<p><br /></p>

<p>이제 Role의 이름만 지어주면 된다. 나는 example-for-ec2로 이름지었다.</p>

<p><img src="/assets/img/20250115/iam-role-use-5.png" alt="" /></p>

<p><br /></p>

<p>다시 IAM Role로 돌아가 보면 생성이 되어있음을 알 수 있다.</p>

<p><img src="/assets/img/20250115/iam-role-use-6.png" alt="" /></p>

<p><br /></p>

<h3 id="ec2에-붙여넣기">EC2에 붙여넣기</h3>

<p>EC2 인스턴스 중에 IAM Role이 적용되지 않는 인스턴스를 선택한 다음 Actions &gt; Security &gt; Modify IAM Role을 선택한다.</p>

<p><img src="/assets/img/20250115/iam-role-use-7.png" alt="" /></p>

<p><br /></p>

<p>여기서 아까 만들었던 Role을 선택한다.</p>

<p><img src="/assets/img/20250115/iam-role-use-8.png" alt="" /></p>

<p><br /></p>

<p>다시 돌아가 보면 IAM Role이 부착되었음을 알 수 있다.</p>

<p><img src="/assets/img/20250115/iam-role-use-9.png" alt="" /></p>

<p><br /></p>

<p>IAM Role이 부착된 EC2를 콘솔로 접근한 다음 아래와 같은 명령어를 입력해 보자 S3 버킷 리스트를 불러올 수 있다면 정상적으로 작동이 된 것이다.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ubuntu@ip-127-00-00-000:~<span class="nv">$ </span>aws s3 <span class="nb">ls
</span>2024-01-26 09:06:37 bucket1
2023-11-29 11:01:03 bucket2
2024-01-26 04:57:58 bucket3
</code></pre></div></div>

<p>만약 접근이 안된다면 아래와 같은 결과가 나온다.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ubuntu@ip-127-00-00-000:~<span class="nv">$ </span>aws s3 <span class="nb">ls

</span>An error occurred <span class="o">(</span>AccessDenied<span class="o">)</span> when calling the ListBuckets operation: User: arn:aws:sts::00000000000:assumed-role/example-for-ec2/i-000000000000 is not authorized to perform: s3:ListAllMyBuckets because no identity-based policy allows the s3:ListAllMyBuckets action
</code></pre></div></div>

<p>해석을 하자면 s3 버킷 리스트를 불러오기 위해서는 <code class="language-plaintext highlighter-rouge">s3:ListAllMyBuckets</code> 라는 권한이 없기 때문에 불러올 수 없다는 뜻이 된다. 이럴 때는 IAM Role이 제대로 부착되어 있는지 확인하고, 부착이 되어 있더라도 <code class="language-plaintext highlighter-rouge">Actions</code>에 <code class="language-plaintext highlighter-rouge">s3:ListAllMyBuckets</code>가 제대로 명시되어 있는지 다시 한번 확인하자.</p>

<h2 id="이밖의-다른-사용법들">이밖의 다른 사용법들</h2>

<p>위에 서술하다시피, IAM Role은 AWS를 사용하는 백엔드가 구축된 EC2 또는 ECS 컨테이너에서 IAM User 대용으로 사용하기도 하지만 이 외에도 여러 용도가 있다.</p>

<h3 id="cloudwatch-logging">Cloudwatch Logging</h3>

<p>서버를 운영하다 보면 무슨 이슈가 발생했다거나 뭔가를 확인하기 위해 로그를 살펴볼 때가 있다. 그런데 로그는 보통 서버 인스턴스 내부에서 출력이 된다. 그렇다고 해서 일일이 EC2 컨테이너에 들어가기에는 많이 번거롭기 때문에 EC2에 있는 로그들을 Cloudwatch로 내보내서 웹상에서 로그를 볼 수 있게 작업을 하는 경우가 있는데, <strong>이는 EC2에서 Cloudwatch라는 서비스를 사용하는, 즉 “서비스 대 서비스”가 되기 때문에 이때 IAM Role이 사용된다.</strong> 정확히는 EC2의 IAM Role에 Cloudwatch 관련 권한을 부여하는 것이다. 이때 권한명은 CloudWatchLogsFullAccess 이다.</p>

<h3 id="aws-lambda">AWS Lambda</h3>

<p><img src="/assets/img/20250115/iam-role-use-10.png" alt="" /></p>

<p>Serverless API 서비스로 유명한 AWS Lambda는 <strong>일단 만들기만 하면 IAM Role이 자동으로 생성된다.</strong> AWS Lambda는 말 그대로 Serverless 이므로 EC2 처럼 프린팅 해서 콘솔상에서 볼 수 있는 방법이 없기 때문에 바로 자동으로 Cloudwatch와 연동이 되는 것이다. 그래서 AWS Lambda에서 로직을 작성할 때 로그를 출력하는 코드를 작성하고 실행을 하면, 그 출력 정보는 Cloudwatch에 바로 기록이 된다.</p>

<h1 id="마치며">마치며</h1>

<p>IAM User가 각각 사용자들의 권한을 관리하는 서비스라면, IAM Role은 서비스 간의 연동 및 사용에 관한 권한을 관리하는 서비스로, AWS 서비스를 관리함에 있어 상당히 비중이 있는 항목이다. 그렇기 때문에 IAM Role에 대해서 공부해 보고 실제로 적용을 하면, AWS를 관리함에 있어 상당히 유용할 수 있다.</p>]]></content><author><name></name></author><category term="AWS" /><category term="aws" /><category term="iam" /><summary type="html"><![CDATA[개요]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://recoma96.github.io/" /><media:content medium="image" url="https://recoma96.github.io/" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Pytest에서 테스트 처음과 끝부분에 프로세스를 작성하는 법</title><link href="https://recoma96.github.io/testing/2025/01/12/pytest-sessionstart-sessionfinish.html" rel="alternate" type="text/html" title="Pytest에서 테스트 처음과 끝부분에 프로세스를 작성하는 법" /><published>2025-01-12T23:30:00+00:00</published><updated>2025-01-12T23:30:00+00:00</updated><id>https://recoma96.github.io/testing/2025/01/12/pytest-sessionstart-sessionfinish</id><content type="html" xml:base="https://recoma96.github.io/testing/2025/01/12/pytest-sessionstart-sessionfinish.html"><![CDATA[<h1 id="개요">개요</h1>

<p>이전에 <a href="https://recoma96.github.io/django/2024/11/22/django-unittest-set-migration-with-other-db.html">DJango에서 테스트 코드 작성 시 마이그레이션을 하지 말아야 할 데이터베이스 사용법</a> 에서 <code class="language-plaintext highlighter-rouge">DiscoverRunner</code>를 사용하면 맨 처음과 맨 마지막의 로직을 작성함으로써 테스트 시작 전 여러 세팅들을 할 수 있다고 언급했다. 그렇다면, pytest에도 이러한 툴이 있을 까?</p>

<h1 id="fixture">fixture</h1>

<p>이번에 설명할 툴에 대해서 언급하기 전에 fixture부터 설명해야 할 필요가 있다. pytest에서의 fixture는 테스트 함수 간에 공유할 수 있는 상태나 데이터를 제공하는 기능이다. 예를 들어 테스트를 하면서 유저 정보가 담긴 Dict 형태의 데이터가 사전에 필요하다면 아래와 같이 구현하면 된다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="nd">@fixture</span>
<span class="k">def</span> <span class="nf">user</span><span class="p">():</span>
    <span class="n">user_data</span> <span class="o">=</span> <span class="p">{</span><span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">recoma</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">birthday</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">19990101</span><span class="sh">"</span><span class="p">}</span>
    <span class="nf">insert_to_database</span><span class="p">(</span><span class="n">user_data</span><span class="p">)</span>
    
    <span class="k">yield</span> <span class="n">user_data</span>

    <span class="nf">remove_from_database</span><span class="p">(</span><span class="n">user_data</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">test_about_user</span><span class="p">(</span><span class="n">user</span><span class="p">:</span> <span class="nb">dict</span><span class="p">):</span>
    <span class="c1"># Do something
</span></code></pre></div></div>

<p>해당 테스트 코드의 순서는 아래와 같다.</p>
<ol>
  <li><code class="language-plaintext highlighter-rouge">test_about_user()</code>가 작동하기 전에 <code class="language-plaintext highlighter-rouge">user()</code>가 작동한다.</li>
  <li><code class="language-plaintext highlighter-rouge">user()</code>에서 user_data를 리턴한다. 이 리턴된 데이터는 <code class="language-plaintext highlighter-rouge">test_about_user</code>의 <code class="language-plaintext highlighter-rouge">user</code>라는 파라미터에 들어간다.</li>
  <li><code class="language-plaintext highlighter-rouge">test_about_user()</code>는 <code class="language-plaintext highlighter-rouge">user</code>를 이용해서 특정 테스트를 진행한다.</li>
  <li><code class="language-plaintext highlighter-rouge">test_about_user()</code>의 프로세스가 끝나면 <code class="language-plaintext highlighter-rouge">user()</code>의 <code class="language-plaintext highlighter-rouge">yield</code>의 아랫부분이 작동한다.</li>
</ol>

<p><br /></p>

<p>이렇게 fixture는 테스팅을 하기 위해 필요한 데이터들을 미리 세팅하고 테스트 함수들에게 그 데이터를 제공하는데 유용하게 쓰인다. 이런 특성을 이용해 테스트를 세팅할 때도 사용되곤 한다.</p>

<h2 id="한계">한계</h2>

<p>그러나 이 fixture 사용에도 한계가 있다.</p>

<h3 id="scope-범위">scope 범위</h3>

<p>fixture에는 scope라고 해서 작동 범위를 설정하는 파라미터가 있다. 선언 방법은 아래와 같다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@fixture</span><span class="p">(</span><span class="n">scope</span><span class="o">=</span><span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div>

<p>이는 매 테스트 함수(케이스)가 작동될 때마다 해당 함수가 작동됨을 의미한다. scope를 <code class="language-plaintext highlighter-rouge">module</code>로 설정 할 경우 테스트 파일 내 에서만 작동이 되고 <code class="language-plaintext highlighter-rouge">session</code>으로 설정하면 모든 테스트 파일에서 딱 한번만 작동한다. 일단 <code class="language-plaintext highlighter-rouge">module</code>과, <code class="language-plaintext highlighter-rouge">function</code>은 전체 테스트 에서 딱 한번 실행되는게 아니기 때문에 사용하는데 한계가 있다. <code class="language-plaintext highlighter-rouge">session</code>이 그나마 쓸만해 보이지만 이건 이거대로 문제가 있는데. <code class="language-plaintext highlighter-rouge">session</code>으로 설정된 fixture를 사용하기 위해, <strong>매 함수 또는 일부 함수의 파라미터에다가 해당 fixture를 명시해야 한다.</strong> 단순해 보이지만 이는 일일이 코드가 하나씩 추가됨으로써 클린 코드 상 좋지 못한 결과를 보여줄 수 있다.</p>

<h1 id="pytest_session">pytest_session*</h1>

<p>그렇기 때문에 pytest에서는 아예 테스트 실행과 끝나는 시점에 로직을 작성할 수 있도록 인터페이스를 제공해 주는 데 이게 바로 <code class="language-plaintext highlighter-rouge">pytest_sessionstart</code>와 <code class="language-plaintext highlighter-rouge">pytest_sessionfinish</code>이다. 이 둘을 사용하면 <code class="language-plaintext highlighter-rouge">fixture</code>와 각 테스트 함수에 일일이 설정하지 않아도 알아서 잘 돌아간다. 이 두 함수들은 말 그대로 맨 처음에서 부터 시작하기 때문에 특정 테스트 파일에 들어가기 보다는 <code class="language-plaintext highlighter-rouge">conftest.py</code>에 작성이 되는 경우가 더 많다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># conftest.py
</span>
<span class="k">def</span> <span class="nf">pytest_sessionstart</span><span class="p">(</span><span class="n">session</span><span class="p">:</span> <span class="n">_pytest</span><span class="p">.</span><span class="n">main</span><span class="p">.</span><span class="n">Session</span><span class="p">):</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Start</span><span class="sh">"</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">pytest_sessionfinish</span><span class="p">(</span><span class="n">session</span><span class="p">:</span> <span class="n">_pytest</span><span class="p">.</span><span class="n">main</span><span class="p">.</span><span class="n">Session</span><span class="p">):</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Finish!</span><span class="sh">"</span><span class="p">)</span>


<span class="c1"># test_example.py
</span>
<span class="k">def</span> <span class="nf">test_example</span><span class="p">():</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Testing</span><span class="sh">"</span><span class="p">)</span>

</code></pre></div></div>]]></content><author><name></name></author><category term="Testing" /><category term="python" /><category term="testing" /><category term="pytest" /><summary type="html"><![CDATA[개요]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://recoma96.github.io/" /><media:content medium="image" url="https://recoma96.github.io/" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Base64를 사용하는 이유</title><link href="https://recoma96.github.io/computer_science/2024/12/27/base64.html" rel="alternate" type="text/html" title="Base64를 사용하는 이유" /><published>2024-12-27T00:00:00+00:00</published><updated>2024-12-27T00:00:00+00:00</updated><id>https://recoma96.github.io/computer_science/2024/12/27/base64</id><content type="html" xml:base="https://recoma96.github.io/computer_science/2024/12/27/base64.html"><![CDATA[<h1 id="개요">개요</h1>

<p>회사에서 개발과 관련된 일을 하다 보면 OpenAPI를 이용한 기능을 구현할 때가 있다. 그런데 간혹 공공기관의 OpenAPI를 이용하다 보면 대부분 인증 관련 데이터를 Base64로 인코딩을 해달라는 요구가 있다. 심지어 운전면허 검증 API중의 하나인 RIMS API의 경우 body 마저도 AES 암호화에 Base64까지 인코딩을 해야 한다. 아니 어차피 HTTPS로 암호화를 따로 할 텐데 왜 도대체 이런 짓들을 하는 걸까? Base64의 의미와 사용하는 이유를 알아보자.</p>

<h1 id="base64">Base64</h1>

<h2 id="설명">설명</h2>

<p>Base64란 바이너리 데이터를 문자로 64진법 형식으로 인코딩을 하는 방식을 말한다.</p>

<table>
  <thead>
    <tr>
      <th>M</th>
      <th>a</th>
      <th>n</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>01001101</td>
      <td>01100001</td>
      <td>01101110</td>
    </tr>
  </tbody>
</table>

<p>예를 들어 “Man”을 Base64로 인코딩한다고 하자, 문자(char)의 데이터 크기는 1byte, 즉 8bit이다. Man이라는 문자열의 길이는 총 3byte이므로 8bit + 8bit + 8bit = 24bit이다. Base64는 이걸 64진법으로 인코딩한다고 했는데. 64는 2^6이다. 즉, 24bit를 6bit 단위로 쪼갠 다음, Base64 색인표에 따라 텍스트를 생성한다.<br /><br /></p>

<p>출처: 위키백과
<img src="/assets/img/20241227/base64-index.png" alt="base64-index" /></p>

<table>
  <thead>
    <tr>
      <th>T</th>
      <th>W</th>
      <th>F</th>
      <th>u</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>010011</td>
      <td>01<strong>0110</strong></td>
      <td><strong>0001</strong>01</td>
      <td>101110</td>
    </tr>
  </tbody>
</table>

<p>이렇게 해서 “Man”에서 “TWFu”로 인코딩이 되었다.</p>

<h3 id="마지막을-로-패딩하는-이유">마지막을 =로 패딩하는 이유</h3>

<p>가끔씩 보면 마지막이 “=”로 끝나는 경우가 있다. 8bit단위에서 6bit단위로 쪼개기 때문에 마지막에 2bit 혹은 4bit가 비게 되는데. 이때는 “=” 기호로 padding을 하게 된다. 예를 들어 <code class="language-plaintext highlighter-rouge">hello world</code>를 base64로 인코딩을 하면 <code class="language-plaintext highlighter-rouge">aGVsbG8gd29ybGQ=</code> 로 나온다. <code class="language-plaintext highlighter-rouge">hello world</code>라는 문자의 길이는 11byte = 88bit이고 이를 6bit로 쪼개면 마지막에 2bit가 비게 되는데, 이 2bit를 대신 <code class="language-plaintext highlighter-rouge">=</code>로 채운 것이다.</p>

<h2 id="단점">단점</h2>

<p>아까 보다시피 “Man”에서 “TWFu”로 인코딩이 되었는데, 3글자에서 4글자로 1글자 더 추가되었다. 비트를 쪼개는 단위가 8bit에서 6bit로 줄면서 그만큼 글자가 늘어났기 때문이다. 즉, Base64 방식은 데이터의 길이가 늘어난다는 단점이 생기게 된다. 데이터가 커질 수록 스토리지에 저장한다던가, 아니면 데이터 통신을 하는데 있어서 상대적으로 부담이 커질 수 밖에 없다. 그럼에도 불구하고 왜 자주 사용을 할까?</p>

<h2 id="사용-이유">사용 이유</h2>

<p><strong>바이너리 데이터를 손실없이 전송할 수 있기 때문이다.</strong> 데이터 중에서는 우리가 알아볼 수 있는 문자 데이터 말고도 바이너리 데이터에 해당되는 그림 파일, 동영상 파일 등이 있다. <strong>이러한 바이너리 데이터들중 일부는 ASCII 코드에 해당하지 않는 경우가 있다.</strong> 그 이유는 문자(char)의 길이는 8bit(1byte)이지만, ASCII의 범위는 0부터 127까지로 7bit이기 때문이다. 즉, 128부터 255 까지는 ASCII 코드에 해당하지 않기 때문에, 수신자는 이 데이터들을 해석하지 못하게 된다. 하지만 <strong>Base64 인코딩을 사용해 바이너리 데이터들을 ASCII형태의 문자열로 변환을 하게 된다면, 수산자는 해당 데이터를 바로 해석을 할 수 있고, 그 이후에 Base64를 포함한 후속 작업을 진행할 수 있게 된다.</strong></p>

<h3 id="예시-이메일-전송시-사용">예시: 이메일 전송시 사용</h3>

<p>이러한 대표적인 예로 메일을 주고받을 때 사용되는 STMP 프로토콜이 있다. 이 프로토콜은 7bit 단위의 데이터만 취급하기 때문에 8bit 이상의 유니코드나, 기타 바이너리 데이터들은 Base64로 6bit 단위로 인코딩을 해서 송수신을 한다.</p>

<h1 id="utf-8-과의-차이점">UTF-8 과의 차이점</h1>

<p>찬혹 UTF-8 인코딩과 헷갈릴 수 있는데 UTF-8은 <em>Unicode Transformation Format - 8bit</em> 의 약자다. 즉, 유니코드를 표현하기 위해 사용되는 인코딩 방식으로, 다양한 언어를 표현할 때 사용된다. 안전성을 목적으로 둔 Base64와는 경우가 다르다.</p>

<h1 id="파이썬에서-base64-사용해-보기-feat-utf-8">파이썬에서 Base64 사용해 보기 (feat. UTF-8)</h1>

<p>파이썬에서는 base64로 인코딩 또는 디코딩을 하는 모듈을 기본으로 제공한다.</p>

<h2 id="인코딩">인코딩</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">base64</span>

<span class="n">text</span> <span class="o">=</span> <span class="sh">'</span><span class="s">안녕 월드</span><span class="sh">'</span>
<span class="n">utf_text</span> <span class="o">=</span> <span class="n">text</span><span class="p">.</span><span class="nf">encode</span><span class="p">(</span><span class="sh">'</span><span class="s">utf-8</span><span class="sh">'</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">utf_text</span><span class="p">)</span>
<span class="c1"># 바이너리로 변환 -&gt; b'\xec\x95\x88\xeb\x85\x95 \xec\x9b\x94\xeb\x93\x9c'
</span>
<span class="n">encoded_text</span> <span class="o">=</span> <span class="n">base64</span><span class="p">.</span><span class="nf">b64encode</span><span class="p">(</span><span class="n">utf_text</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">encoded_text</span><span class="p">)</span>
<span class="c1"># b'7JWI64WVIOyblOuTnA=='
</span></code></pre></div></div>

<h2 id="디코딩">디코딩</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">base64</span>

<span class="n">encoded_text</span> <span class="o">=</span> <span class="sa">b</span><span class="sh">'</span><span class="s">7JWI64WVIOyblOuTnA==</span><span class="sh">'</span>
<span class="n">decoded_text</span> <span class="o">=</span> <span class="n">base64</span><span class="p">.</span><span class="nf">b64decode</span><span class="p">(</span><span class="n">encoded_text</span><span class="p">)</span>
<span class="c1"># base64 디코딩 -&gt; b'\xec\x95\x88\xeb\x85\x95 \xec\x9b\x94\xeb\x93\x9c'
</span>
<span class="n">text</span> <span class="o">=</span> <span class="n">decoded_text</span><span class="p">.</span><span class="nf">decode</span><span class="p">(</span><span class="sh">'</span><span class="s">utf-8</span><span class="sh">'</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">text</span><span class="p">)</span>
<span class="c1"># utf-8 디코딩 -&gt; 안녕 월드
</span></code></pre></div></div>]]></content><author><name></name></author><category term="Computer_Science" /><category term="computer-science" /><category term="data" /><category term="encoding" /><summary type="html"><![CDATA[개요]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://recoma96.github.io/" /><media:content medium="image" url="https://recoma96.github.io/" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Datagrip에서 SSH 터널링으로 데이터베이스 접근하기</title><link href="https://recoma96.github.io/%EA%B0%9C%EB%B0%9C%EB%8F%84%EA%B5%AC_%EC%82%AC%EC%9A%A9%EB%B2%95/2024/12/23/datagrip-ssh-ternaling.html" rel="alternate" type="text/html" title="Datagrip에서 SSH 터널링으로 데이터베이스 접근하기" /><published>2024-12-23T04:00:00+00:00</published><updated>2024-12-23T04:00:00+00:00</updated><id>https://recoma96.github.io/%EA%B0%9C%EB%B0%9C%EB%8F%84%EA%B5%AC_%EC%82%AC%EC%9A%A9%EB%B2%95/2024/12/23/datagrip-ssh-ternaling</id><content type="html" xml:base="https://recoma96.github.io/%EA%B0%9C%EB%B0%9C%EB%8F%84%EA%B5%AC_%EC%82%AC%EC%9A%A9%EB%B2%95/2024/12/23/datagrip-ssh-ternaling.html"><![CDATA[<h1 id="개요">개요</h1>

<p>데이터베이스는 고객의 중요 데이터를 저장하는 매우매우 중요한 시설이다. 그렇기 때문에 어지간한 기업에서는 데이터베이스 보안을 철처히 해놓는다. 내가 다니고 있는 회사도 마찬가지인데,
일단 데이터베이스를 VPC에 포함시켜 VPC에 포함되는 서비스에서만 사용할 수 있게 했고, Publicy accessible을 False로 세팅함으로써 Security Group에서 0.0.0.0으로 범위를 설정해도 접속하지 못하게 막아놨다. 즉, 사내 IP로는 직접 접속이 불가능하고, 접속할 수 있는 유일한 방법은 오로지 SSH를 통해 운영서버에 접속을 한 다음, 그 운영서버에서 데이터베이스에 접속(mysql-client)해서 SQL문을 타이핑하는 방법이다. 보안상으로는 좋긴 하지만, 데이터베이스 접속을 터미널로 하는 것에 대해 불편함을 가진 적이 많았다. 하지만 데이터베이스 IDE중 하나인 <strong>DataGrip</strong> 에서는 SSH를 통해 데이터베이스를 접속하는 <strong>SSH 터널링</strong>을 지원한다.</p>

<h1 id="사용법">사용법</h1>

<ol>
  <li>
    <p>SSH/SSL 탭에 들어간다. 여기서 <strong>Use SSH Tunnel</strong> 을 체크하고 오른쪽에 …을 클릭한다.
<img src="/assets/img/20241223/1.png" alt="1" /></p>
  </li>
  <li>
    <p>SSH Configuration이라는 창이 뜨는데, 여기서는 데이터베이스에 접속할 서버 정보를 입력하면 된다. 즉 SSH 정보를 입력하면 되는데, 패스워드가 아니니 pem key를 사용할 경우 “Authentication type”에 “Key pair”를 선택하고 Private Key File에 pem키 경로를 입력하면 된다.
<img src="/assets/img/20241223/2.png" alt="2" /></p>
  </li>
  <li>
    <p>“Test Connection”을 클릭해 접속 여부를 확인한다. 성공했으면 아래와 같은 문구가 뜬다. <strong>데이터베이스에 접속할 서버와의 SSH 연동이 정상적으로 완료되었다는 뜻이다. 절대 데이터베이스 접속에 성공했다는 뜻이 아니다.</strong> 성공했으면 OK를 눌러 다시 뒤로 간다.</p>
  </li>
</ol>

<p><img src="/assets/img/20241223/3.png" alt="3" /></p>

<ol>
  <li>General 탭에 돌아와서 데이터베이스 정보를 입력하면 된다. 여기부터는 일반적인 데이터베이스 접속하는 방법과 일치. Success 표시가 뜨면 연동하는데 성공했단 뜻이고, OK버튼을 누르면 그 다음부터 사용할 수 있다.</li>
</ol>

<p><img src="/assets/img/20241223/4.png" alt="4" /></p>]]></content><author><name></name></author><category term="개발도구_사용법" /><category term="database" /><category term="ide" /><category term="datagrip" /><summary type="html"><![CDATA[개요]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://recoma96.github.io/" /><media:content medium="image" url="https://recoma96.github.io/" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">CMD vs ENTRYPOINT</title><link href="https://recoma96.github.io/docker/2024/12/17/cmd-vs-entrypoint.html" rel="alternate" type="text/html" title="CMD vs ENTRYPOINT" /><published>2024-12-17T00:00:00+00:00</published><updated>2024-12-17T00:00:00+00:00</updated><id>https://recoma96.github.io/docker/2024/12/17/cmd-vs-entrypoint</id><content type="html" xml:base="https://recoma96.github.io/docker/2024/12/17/cmd-vs-entrypoint.html"><![CDATA[<h1 id="개요">개요</h1>

<p>CMD는 Docker Container가 돌아갈 때 실행하는 명령어이다. 예를 들어 Django 기반의 서버 컨테이너를 띄운다고 한다면 CMD는 아래와 같을 것이다.</p>

<div class="language-dockerfile highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">CMD</span><span class="s"> ["python", "manage.py", "runserver"]</span>
</code></pre></div></div>

<p>ENTRYPOINT도 마찬가지로 전체적으로 봤을 땐 CMD와 비슷하다. 사용법은 아래와 같고 결과는 일단 CMD와 일치하다.</p>

<div class="language-dockerfile highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">ENTRYPOINT</span><span class="s"> ["python", "manage.py", "runserver"]</span>
</code></pre></div></div>

<p>두 개의 기능 차이가 거의 없다 보니, 나 같은 경우에는 아무 생각없이 이 두개를 혼용해서 사용해 왔다. 하지만 이 둘 사이에는 미묘한 차이가 있고 상황에 따라 써야 하는 경우가 다르다.</p>

<h1 id="cmd">CMD</h1>

<p>컨테이너가 실행되는 Default 명령어이다. 즉 필요하면 CMD 내용을 바꿀 수 있다. 아래와 같은 DockerFile이 있다고 가정해 보자.</p>

<div class="language-dockerfile highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">FROM</span><span class="s"> ubuntu</span>
<span class="k">CMD</span><span class="s"> ["echo", "Hello, World!"]</span>
</code></pre></div></div>

<p>DockerFile을 이미지로 빌드하고 아래와 같이 인자값으로 <code class="language-plaintext highlighter-rouge">ls -al</code> 를 추가하면 <code class="language-plaintext highlighter-rouge">Hello, World</code>가 아니라 현재 위치의 디렉토리가 출력된다.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>docker run <span class="nt">--name</span> example example <span class="nb">ls</span> <span class="nt">-al</span>
total 56
drwxr-xr-x   1 root root 4096 Dec 16 08:26 <span class="nb">.</span>
drwxr-xr-x   1 root root 4096 Dec 16 08:26 ..
<span class="nt">-rwxr-xr-x</span>   1 root root    0 Dec 16 08:26 .dockerenv
lrwxrwxrwx   1 root root    7 Apr 22  2024 bin -&gt; usr/bin
drwxr-xr-x   2 root root 4096 Apr 22  2024 boot
drwxr-xr-x   5 root root  340 Dec 16 08:26 dev
drwxr-xr-x   1 root root 4096 Dec 16 08:26 etc
drwxr-xr-x   3 root root 4096 Nov 19 09:50 home
lrwxrwxrwx   1 root root    7 Apr 22  2024 lib -&gt; usr/lib
drwxr-xr-x   2 root root 4096 Nov 19 09:44 media
drwxr-xr-x   2 root root 4096 Nov 19 09:44 mnt
drwxr-xr-x   2 root root 4096 Nov 19 09:44 opt
dr-xr-xr-x 231 root root    0 Dec 16 08:26 proc
drwx------   2 root root 4096 Nov 19 09:50 root
drwxr-xr-x   4 root root 4096 Nov 19 09:50 run
lrwxrwxrwx   1 root root    8 Apr 22  2024 sbin -&gt; usr/sbin
drwxr-xr-x   2 root root 4096 Nov 19 09:44 srv
dr-xr-xr-x  11 root root    0 Dec 16 08:26 sys
drwxrwxrwt   2 root root 4096 Nov 19 09:50 tmp
drwxr-xr-x  11 root root 4096 Nov 19 09:44 usr
drwxr-xr-x  11 root root 4096 Nov 19 09:50 var
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">docker inspect example</code> 로 Docker 정보를 살펴보면 <code class="language-plaintext highlighter-rouge">Cmd</code> 부분에는 <code class="language-plaintext highlighter-rouge">ls -al</code>로 바뀌어 있고, Path와 Args 역시 <code class="language-plaintext highlighter-rouge">ls -al</code>로 바뀌어 있다.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>docker inspect example
... 이하 생략 ...
        <span class="s2">"Path"</span>: <span class="s2">"ls"</span>,
        <span class="s2">"Args"</span>: <span class="o">[</span>
            <span class="s2">"-al"</span>
        <span class="o">]</span>,
... 이하 생략 ...
            <span class="s2">"Cmd"</span>: <span class="o">[</span>
                <span class="s2">"ls"</span>,
                <span class="s2">"-al"</span>
            <span class="o">]</span>,
            <span class="s2">"Entrypoint"</span>: null,
</code></pre></div></div>

<p>이렇게 CMD는 명령어를 실행하긴 하지만 언제든지 인자값을 추가함으로써 명령어를 변경할 수 있다. 하지만 ENTRYPOINT는 경우가 다르다.</p>

<h1 id="entrypoint">ENTRYPOINT</h1>

<p>CMD와는 달리 인자가 바뀔 수 없고 무조건 ENTRYPOINT에 기재된 내용대로 컨테이너가 실행된다. 즉, CMD처럼 <code class="language-plaintext highlighter-rouge">ls -al</code> 를 입력했다고 해서 디렉토리 리스트가 나오지 않는다.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>docker run <span class="nt">--name</span> example example <span class="nb">ls</span> <span class="nt">-al</span>
Hello, World! <span class="nb">ls</span> <span class="nt">-al</span>
</code></pre></div></div>

<p>여전히 <code class="language-plaintext highlighter-rouge">Hello World</code>! 가 나오고, 바로 옆에 <code class="language-plaintext highlighter-rouge">ls -al</code> 가 출력되었다. <code class="language-plaintext highlighter-rouge">docker inspect exmaple</code> 를 입력해서 도커 컨테이너 정보를 알아보자.</p>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>docker inspet example
... 이하 생략 ...
        <span class="s2">"Path"</span>: <span class="s2">"echo"</span>,
        <span class="s2">"Args"</span>: <span class="o">[</span>
            <span class="s2">"Hello, World!"</span>,
            <span class="s2">"ls"</span>,
            <span class="s2">"-al"</span>
        <span class="o">]</span>,
... 이하 생략 ...
            <span class="s2">"Cmd"</span>: <span class="o">[</span>
                <span class="s2">"ls"</span>,
                <span class="s2">"-al"</span>
            <span class="o">]</span>,
            <span class="s2">"Entrypoint"</span>: <span class="o">[</span>
                <span class="s2">"echo"</span>,
                <span class="s2">"Hello, World!"</span>
            <span class="o">]</span>,
</code></pre></div></div>

<p>밑에 보면 Cmd에는 변경된 명령어 <code class="language-plaintext highlighter-rouge">ls -al</code> 이 적혀있지만, Entrypoint의 명령어가 먼저 나왔다. Path는 <code class="language-plaintext highlighter-rouge">echo</code>로 변함이 없는데, Args에서는 <code class="language-plaintext highlighter-rouge">Hello, World!</code> 뒤로 <code class="language-plaintext highlighter-rouge">ls</code>와 <code class="language-plaintext highlighter-rouge">-al</code>이 추가되었다.</p>

<p>따라서 ENTRYPOINT에서는 인자를 추가하면 명령어 자체가 바뀌는게 아니라 입력한 인자값이 ENTRYPOINT 내용의 뒤로 간다.</p>

<h1 id="두개-혼용하기">두개 혼용하기</h1>

<p>CMD와 ENTRYPOINT 두개를 활용할 수도 있다. ENTRYPOINT는 컨테이너 실행부로 사용하고, CMD는 Default 인자값으로 사용할 수 있다. 이렇게 되면 <code class="language-plaintext highlighter-rouge">docker run</code>으로 컨테이너 실행시, 추가 인자값이 없으면 CMD에 있는 내용이 인자값으로 들어가고, 인자값을 추가하면 그 추가된 인자값이 CMD를 대신한다. 이렇게 해서 컨테이너 실행을 좀더 유연하게 할 수 있다.</p>

<div class="language-dockerfile highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">FROM</span><span class="s"> ubuntu</span>
<span class="k">ENTRYPOINT</span><span class="s"> ["echo"]</span>
<span class="k">CMD</span><span class="s"> ["Hello, World!"]</span>
</code></pre></div></div>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>docker run <span class="nt">--name</span> example example
Hello, World!

<span class="nv">$ </span>docker run <span class="nt">--name</span> example example <span class="s1">'Hello, Docker!'</span>
Hello, Docker!
</code></pre></div></div>]]></content><author><name></name></author><category term="Docker" /><category term="docker" /><category term="dockerfile" /><summary type="html"><![CDATA[개요]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://recoma96.github.io/" /><media:content medium="image" url="https://recoma96.github.io/" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">매직 넘버(Magic Number)의 의미와 유의해야 할 점</title><link href="https://recoma96.github.io/software_arhitecture/2024/12/13/magic-number.html" rel="alternate" type="text/html" title="매직 넘버(Magic Number)의 의미와 유의해야 할 점" /><published>2024-12-13T00:30:00+00:00</published><updated>2024-12-13T00:30:00+00:00</updated><id>https://recoma96.github.io/software_arhitecture/2024/12/13/magic-number</id><content type="html" xml:base="https://recoma96.github.io/software_arhitecture/2024/12/13/magic-number.html"><![CDATA[<h1 id="매직-넘버의-의미와-문제점">매직 넘버의 의미와 문제점</h1>

<p>매직 넘버(Magic Number)란 <strong>아무런 설명 없이 임의로 들어가는 상수 또는 기타 데이터</strong>를 의미한다. 즉, 개발자 입장에서는 코드상에 상수가 노출되어 있다는 뜻이 되기도 한다. 처음엔 뭔 소린지 와닿지 않겠지만 우리가 처음 코딩을 공부할 때 쥐도새도 모르게 밥먹듯이 썼던 개념이다. 밑의 예시를 보자.</p>

<h2 id="예시1">예시1</h2>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kt">int</span> <span class="n">score</span><span class="p">;</span>
<span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">score</span><span class="p">;</span>

<span class="k">if</span><span class="p">(</span><span class="n">score</span> <span class="o">&gt;=</span> <span class="mi">90</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="sc">'A'</span><span class="p">;</span>
<span class="p">}</span> <span class="k">else</span> <span class="nf">if</span><span class="p">(</span><span class="n">score</span> <span class="o">&gt;=</span> <span class="mi">80</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="sc">'B'</span><span class="p">;</span>
<span class="p">}</span> <span class="k">else</span> <span class="nf">if</span><span class="p">(</span><span class="n">score</span> <span class="o">&gt;=</span> <span class="mi">70</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="sc">'C'</span><span class="p">;</span>
<span class="p">}</span> <span class="k">else</span> <span class="nf">if</span><span class="p">(</span><span class="n">score</span> <span class="o">&gt;=</span> <span class="mi">60</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="sc">'D'</span><span class="p">;</span>
<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"미달"</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">if</code>문을 처음 공부할 때 국룰로 나오는 <code class="language-plaintext highlighter-rouge">grade</code>관련 분기 예시다. 이렇게 특정 설명 없이 90, 80, 70, 60 상수로 적혀 있는 것을 <strong>매직넘버</strong> 라고 한다. 하지만 이 상수들의 무엇을 의미하는지는 이미 코드에 명확하게 명시되어 있다. 90점 이상이면 A, 80점대면 B, 70점대면 C, 60점대면 D, 그 이하는 미달이다. 그렇기에 겉으로는 문제가 없어 보인다.</p>

<blockquote>
  <p>경우에 따라서는 ‘A’, ‘B’, ‘C’, ‘D’ 도 매직넘버로 보는 견해가 있다. 얘네들도 특정한 설명이 따로 없기 때문이다.</p>
</blockquote>

<h2 id="예시2">예시2</h2>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">input</span>

<span class="nf">if</span><span class="p">(</span><span class="n">input</span> <span class="o">==</span> <span class="mi">3</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"남성입니다."</span> <span class="o">&lt;&lt;</span> <span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>
<span class="p">}</span> <span class="k">else</span> <span class="nf">if</span> <span class="p">(</span><span class="n">input</span> <span class="o">==</span> <span class="mi">4</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"여성입니다."</span> <span class="o">&lt;&lt;</span> <span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>코드를 보아하니 input이 3이면 남성이고 input이 4이면 여성으로 판정을 하고 있는 모양이다. 겉으로는 문제가 없어 보인다. 3이 남자고 4이 여자인게 명확하니까. 하지만 이건 어떨까?</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="nf">send_fcm_to_single_user</span><span class="p">(</span><span class="n">User</span><span class="o">&amp;</span> <span class="n">user</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span><span class="p">(</span><span class="n">user</span><span class="p">.</span><span class="n">gender</span> <span class="o">==</span> <span class="mi">3</span> <span class="o">&amp;&amp;</span> <span class="n">user</span><span class="p">.</span><span class="n">is_specialist</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">push_fcm_message</span><span class="p">(</span><span class="n">user</span><span class="p">,</span> <span class="s">"This is Important Notice"</span><span class="p">,</span> <span class="s">"The Important Notice"</span><span class="p">);</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="n">push_fcm_message</span><span class="p">(</span><span class="n">user</span><span class="p">,</span> <span class="s">"This is Notice"</span><span class="p">,</span> <span class="s">"The Notice"</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">send_fcm_to_single_user</code> 함수는 성별이 남성이면서(<code class="language-plaintext highlighter-rouge">user.gender == 3</code>) 동시에 특수유저(<code class="language-plaintext highlighter-rouge">user.is_specialist</code>)일때 중요 푸시알림을 보내고 그렇지 않으면 일반 푸시알림을 보낸다. 하지만 도메인을 모르는 사람 또는 신규 개발자가 이 코드를 보면 어떤 조건으로 중요 푸시알림을 발송하는지 전혀 모른다. <strong><code class="language-plaintext highlighter-rouge">user.gender == 3</code>이 도대체 어떤 것을 의미하는 지 모르기 때문이다.</strong> 당장 이 코드만 봐도 의도를 모르겠는데, 이러한 매직넘버들이 서비스 코드 도처에 깔려있다고 생각해 보자. 아마 담당자한테 일일이 반복적으로 이게 뭔 소린지 물어봐야 할 것이다. 게다가 만약에 남성을 지칭하는 상수가 3에서 5로 바뀐다면, <strong>파일 하나하나씩 뒤져가면서 3을 5로 바꿔야 하는 끔찍한 사태가 벌어질 것이다.</strong> 다 바꿨다 해도 결국 <strong>사람이 코드를 수정했기 때문에 휴먼에러가 일어날 가능성이 생기게 되고 이는 결국 서비스 장애로 이어지게 된다.</strong></p>

<h1 id="제대로-사용하려면">제대로 사용하려면?</h1>

<h2 id="고정-변수-형한정어-const-사용">고정 변수 (형한정어, const) 사용</h2>

<p>매직 넘버를 고정변수로 변경을 해서, 다른 개발자들이 금방 알아볼 수 있게 하면 된다.</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// gender.cpp</span>
<span class="k">const</span> <span class="n">MALE</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
<span class="k">const</span> <span class="n">FEMAILE</span> <span class="o">=</span> <span class="mi">4</span><span class="p">;</span>

<span class="c1">// fcm.cpp</span>
<span class="kt">void</span> <span class="nf">send_fcm_to_single_user</span><span class="p">(</span><span class="n">User</span><span class="o">&amp;</span> <span class="n">user</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span><span class="p">(</span><span class="n">user</span><span class="p">.</span><span class="n">gender</span> <span class="o">==</span> <span class="n">MALE</span> <span class="o">&amp;&amp;</span> <span class="n">user</span><span class="p">.</span><span class="n">is_specialist</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">push_fcm_message</span><span class="p">(</span><span class="n">user</span><span class="p">,</span> <span class="s">"This is Important Notice"</span><span class="p">,</span> <span class="s">"The Important Notice"</span><span class="p">);</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="n">push_fcm_message</span><span class="p">(</span><span class="n">user</span><span class="p">,</span> <span class="s">"This is Notice"</span><span class="p">,</span> <span class="s">"The Notice"</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>이제 <code class="language-plaintext highlighter-rouge">user.gender == MALE</code>로 바뀜으로써 누구한테 중요 알림을 보내는지 처음 보는 사람도 정확히 알 수 있게 되었다. 뿐만 아니라 남성 코드가 3에서 5로 바뀔 때, 일일이 3에서 5로 바꾸는 것이 아닌 <code class="language-plaintext highlighter-rouge">gender.cpp</code>의 <code class="language-plaintext highlighter-rouge">MALE</code>의 값만 변경하면 된다.</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">const</span> <span class="n">MALE</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
<span class="k">const</span> <span class="n">FEMAILE</span> <span class="o">=</span> <span class="mi">4</span><span class="p">;</span>
<span class="k">const</span> <span class="n">OTHER_SERVICE_MALE</span> <span class="o">=</span> <span class="mi">5</span>
<span class="k">const</span> <span class="n">OTHER_SERVICE_FEMAILE</span> <span class="o">=</span> <span class="mi">6</span>
</code></pre></div></div>

<p>하지만 특정 서비스에서의 성별 코드가 다르다면 동일 변수 이름을 피하기 위해 <code class="language-plaintext highlighter-rouge">OTHER_SERVICE_MALE</code> 처럼 앞에 접두사를 붙여야 한다. 이렇게 되면 변수명은 복잡해지게 되고 코드를 읽기가 힘들어지게 된다. 그래서 나온게 <code class="language-plaintext highlighter-rouge">Enum</code>이라는 구조체(클래스)다.</p>

<h2 id="enum-사용">Enum 사용</h2>

<p>좀더 나아가서 Enum 계열의 자료구조 또는 클래스를 활용할 수도 있다.
Enum을 사용하게 되면 코드가 좀더 깔끔하게 정리가 된다.</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// gender.cpp</span>
<span class="k">enum</span> <span class="n">Gender</span> <span class="p">{</span>
    <span class="n">MALE</span> <span class="o">=</span> <span class="mi">3</span><span class="p">,</span>
    <span class="n">FEMALE</span> <span class="o">=</span> <span class="mi">4</span><span class="p">,</span>
<span class="p">}</span>

<span class="k">enum</span> <span class="n">OtherServiceGender</span> <span class="p">{</span>
    <span class="n">MALE</span> <span class="o">=</span> <span class="mi">5</span><span class="p">,</span>
    <span class="n">FEMALE</span> <span class="o">=</span> <span class="mi">6</span><span class="p">,</span>
<span class="p">}</span>

<span class="c1">// fcm.cpp</span>
<span class="kt">void</span> <span class="nf">send_fcm_to_single_user</span><span class="p">(</span><span class="n">User</span><span class="o">&amp;</span> <span class="n">user</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span><span class="p">(</span><span class="n">user</span><span class="p">.</span><span class="n">gender</span> <span class="o">==</span> <span class="n">Gender</span><span class="o">::</span><span class="n">MALE</span> <span class="o">&amp;&amp;</span> <span class="n">user</span><span class="p">.</span><span class="n">is_specialist</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">push_fcm_message</span><span class="p">(</span><span class="n">user</span><span class="p">,</span> <span class="s">"This is Important Notice"</span><span class="p">,</span> <span class="s">"The Important Notice"</span><span class="p">);</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="n">push_fcm_message</span><span class="p">(</span><span class="n">user</span><span class="p">,</span> <span class="s">"This is Notice"</span><span class="p">,</span> <span class="s">"The Notice"</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="python의-경우-dict-vs-enum">Python의 경우 (dict vs Enum)</h3>

<p>Python 에서도 <code class="language-plaintext highlighter-rouge">Enum</code>을 지원하기 하지만 상수 비교하는 과정이 다른 언어보다 약간 복잡하기 때문에 일부 Python 개발자들 사이에서는 <code class="language-plaintext highlighter-rouge">Enum</code>을 쓸지 <code class="language-plaintext highlighter-rouge">dict</code>를 쓸지 논란이 되기도 한다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Gender</span><span class="p">(</span><span class="n">Enum</span><span class="p">):</span>
    <span class="n">MALE</span> <span class="o">=</span> <span class="mi">3</span>
    <span class="n">FEMALE</span> <span class="o">=</span> <span class="mi">4</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="sh">"</span><span class="s">__main__</span><span class="sh">"</span><span class="p">:</span>
    <span class="n">input_gender</span> <span class="o">=</span> <span class="mi">3</span>
    <span class="k">if</span> <span class="n">input_gender</span> <span class="o">==</span> <span class="n">Gender</span><span class="p">.</span><span class="n">MALE</span><span class="p">.</span><span class="n">value</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="n">Gender</span><span class="p">.</span><span class="n">MALE</span><span class="p">.</span><span class="n">name</span><span class="p">)</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">Gender.MALE == input_gender</code>로 하면 비교 연산이 정상적으로 작동이 되지 않는다. <code class="language-plaintext highlighter-rouge">Gender.MALE</code>을 Enum 클래스로 인식하기 때문이다. <code class="language-plaintext highlighter-rouge">Gender.MALE.value</code> 까지 가야 상수와 비교 연산이 가능하다. <code class="language-plaintext highlighter-rouge">Gender.MALE.name</code>으로 하면 열거형 이름인 ‘MALE’ 이라는 문자열이 나온다. <code class="language-plaintext highlighter-rouge">.value</code>와 <code class="language-plaintext highlighter-rouge">.name</code>에 대해서 유용하게 사용할 수 있다는 긍정적인 시각도 있지만, 한편으로는 코드가 길어진다는 부정적인 시각도 존재한다. 내가 다니는 회사 역시 이러한 이유로 <code class="language-plaintext highlighter-rouge">Enum</code> 사용에 부정적이고 대신에 순수 변수나 <code class="language-plaintext highlighter-rouge">dict</code>를 사용한다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Gender</span> <span class="o">=</span> <span class="p">{</span>
    <span class="sh">"</span><span class="s">MALE</span><span class="sh">"</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span>
    <span class="sh">"</span><span class="s">FEMALE</span><span class="sh">"</span><span class="p">:</span> <span class="mi">4</span><span class="p">,</span>
<span class="p">}</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="sh">"</span><span class="s">__main__</span><span class="sh">"</span><span class="p">:</span>
    <span class="n">input_gender</span> <span class="o">=</span> <span class="mi">3</span>
    <span class="k">if</span> <span class="n">input_gender</span> <span class="o">==</span> <span class="n">Gender</span><span class="p">[</span><span class="sh">"</span><span class="s">MALE</span><span class="sh">"</span><span class="p">]:</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">남성입니다.</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">dict</code>형을 사용하면 <code class="language-plaintext highlighter-rouge">.value</code>를 추가로 사용할 필요가 없어 코드가 짧아진다. 그러나 <code class="language-plaintext highlighter-rouge">Gender.MALE</code>이 아닌 <code class="language-plaintext highlighter-rouge">Gender["MALE"]</code>은 보는 사람에 따라 가독성에 방해가 될 수 있고. <code class="language-plaintext highlighter-rouge">Enum</code>처럼 열거 전용 자료구조가 아닌 범용으로 사용되는 <code class="language-plaintext highlighter-rouge">dict</code>를 사용했기 때문에 이게 열거형인지 아닌지 헷갈리는 경우가 생긴다는 단점이 있다. 따라서 <strong>파이썬의 경우 열거형을 구현할 때 <code class="language-plaintext highlighter-rouge">dict</code>를 쓸건지 <code class="language-plaintext highlighter-rouge">Enum</code>을 쓸건지, 그리고 어떻게 코드네이밍을 정할 지 고민 또는 팀원들 간에 논의를 할 필요가 있다.</strong></p>

<h1 id="마치며">마치며</h1>

<p>그동안 나를 포함한 대부분의 개발자들은 프로그래밍을 처음 공부를 하는 과정에 무의식적으로 매직넘버를 사용해 왔다. 그리고 그게 버릇이 되어 실무에서도 역시 무의식적으로 매직넘버를 사용하는 일도 생긴다. 나 역시 이런 실수를 여러번 해 왔고 이로 인해 일일이 상수를 변경해야 하는 등 여러번 댓가를 치루기도 했다. 매직넘버를 100% 사용하지 않는 것은 매우 힘들긴 하지만 그래도 가능한 사용하지 않는 방향으로 버릇을 고치는 일은 개발에 있어서 매우 중요한 요소이다.</p>]]></content><author><name></name></author><category term="Software_Arhitecture" /><category term="clean-code" /><summary type="html"><![CDATA[매직 넘버의 의미와 문제점]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://recoma96.github.io/" /><media:content medium="image" url="https://recoma96.github.io/" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">DJango에서 N + 1 Problem 해결하는 방법</title><link href="https://recoma96.github.io/django/2024/12/12/django-n1-problem.html" rel="alternate" type="text/html" title="DJango에서 N + 1 Problem 해결하는 방법" /><published>2024-12-12T01:00:00+00:00</published><updated>2024-12-12T01:00:00+00:00</updated><id>https://recoma96.github.io/django/2024/12/12/django-n1-problem</id><content type="html" xml:base="https://recoma96.github.io/django/2024/12/12/django-n1-problem.html"><![CDATA[<h1 id="개요">개요</h1>

<p>백엔드 프레임워크 또는 다른 라이브러리에서 제공하는 ORM 라이브러리는 데이터베이스와의 상호작용을 편하게 해준다.
하지만 이걸 아무생각없이 남용을 하게되면 DB트래픽 낭비를 하게 되는 이슈가 발생하게 되는데 대표적인 예가 <strong>N + 1 Problem</strong> 이다. Spring Boot, NodeJS등 많은 백엔드 프레임워크에 사용되는 ORM 라이브러리들이 N + 1 Problem을 해결하기 위해 여러가지 도구들을 제공하는 데, DJango-ORM 역시 이와 같은 도구들을 제공한다.</p>

<h2 id="n--1이-뭐에요">N + 1이 뭐에요?</h2>

<p><strong>N + 1 Problem</strong> 이란, 두 개의 연결된 테이블을 조회할 때, 하위 테이블을 참조해서 조회하기 위해 상위 테이블에서
조회된 N개의 테이블들을 하나씩 순회하면서 추가로 DB에 요청을 하는 것을 의미한다. 즉, 상위 테이블을 <strong>1번</strong> 조회하고, 조회된 데이터들을 순회하면서 <strong>하위 테이블들을 각각 조회하게 된다.</strong> 결국 DB에 <strong>N + 1</strong> 개의 요청을 하게 된다고 보면 된다. 이렇게 N이 기하급수적으로 커지게 되면 DB 부하가 커지게 됨은 물론, 서버 성능에도 영향을 미치게 된다.</p>

<h2 id="원인">원인</h2>

<p>Django를 포함한 여러 ORM 라이브러리들은 <strong>Lazy Loading</strong>을 지원한다.
Lazy Loading이란, ORM 함수를 사용한다고 해서 바로 사용하지는 않고 실제 DB 데이터를 사용하려는 시점에서 SQL문이 실행되는 것을 의미한다. 대표적으로 <code class="language-plaintext highlighter-rouge">get()</code>과 <code class="language-plaintext highlighter-rouge">first()</code>가 있다. 평소에는 가만히 있다가 이 함수들이 실행되면 바로 DB로 SQL문 실행을 한다. 그렇기 때문에 유동적으로 쿼리에 쿼리를 추가할 수가 있어 코드를 재활용할 수 있다는 장점이 있다. 하지만, 이는 곧 하위 테이블 데이터의 정보가 필요할 때마다 SQL문을 날리는 N + 1 Problem에 직면하게 된다.</p>

<h3 id="example">Example</h3>

<p>예를 들어 어떤 사용자가 작성한 짧은 게시물들을 조회한다고 할때, 아래와 같이 코드를 작성할 것이다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="n">diaries</span> <span class="o">=</span> <span class="n">ShortDiary</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="nf">filter</span><span class="p">(</span><span class="n">user</span><span class="o">=</span><span class="n">user</span><span class="p">).</span><span class="nf">all</span><span class="p">()</span>
<span class="o">&gt;&gt;&gt;</span> <span class="nf">print</span><span class="p">(</span><span class="n">diaries</span><span class="p">)</span>
<span class="p">(</span><span class="mf">0.001</span><span class="p">)</span> <span class="n">SELECT</span> <span class="sb">`short_diary`</span><span class="p">.</span><span class="sb">`id`</span><span class="p">,</span> <span class="sb">`short_diary`</span><span class="p">.</span><span class="sb">`user_id`</span><span class="p">,</span> <span class="sb">`short_diary`</span><span class="p">.</span><span class="sb">`title`</span><span class="p">,</span> <span class="sb">`short_diary`</span><span class="p">.</span><span class="sb">`context`</span><span class="p">,</span> <span class="sb">`short_diary`</span><span class="p">.</span><span class="sb">`is_deleted`</span> <span class="n">FROM</span> <span class="sb">`short_diary`</span> <span class="n">WHERE</span> <span class="sb">`short_diary`</span><span class="p">.</span><span class="sb">`user_id`</span> <span class="o">=</span> <span class="mi">16</span> <span class="n">LIMIT</span> <span class="mi">21</span><span class="p">;</span> <span class="n">args</span><span class="o">=</span><span class="p">(</span><span class="mi">16</span><span class="p">,);</span> <span class="n">alias</span><span class="o">=</span><span class="n">default</span>
<span class="o">&lt;</span><span class="n">QuerySet</span> <span class="p">[</span><span class="o">&lt;</span><span class="n">ShortDiary</span><span class="p">:</span> <span class="n">ShortDiary</span> <span class="nf">object </span><span class="p">(</span><span class="mi">41</span><span class="p">)</span><span class="o">&gt;</span><span class="p">,</span> <span class="o">&lt;</span><span class="n">ShortDiary</span><span class="p">:</span> <span class="n">ShortDiary</span> <span class="nf">object </span><span class="p">(</span><span class="mi">42</span><span class="p">)</span><span class="o">&gt;</span><span class="p">,</span> <span class="o">&lt;</span><span class="n">ShortDiary</span><span class="p">:</span> <span class="n">ShortDiary</span> <span class="nf">object </span><span class="p">(</span><span class="mi">43</span><span class="p">)</span><span class="o">&gt;</span><span class="p">,</span> <span class="o">&lt;</span><span class="n">ShortDiary</span><span class="p">:</span> <span class="n">ShortDiary</span> <span class="nf">object </span><span class="p">(</span><span class="mi">44</span><span class="p">)</span><span class="o">&gt;</span><span class="p">,</span> <span class="o">&lt;</span><span class="n">ShortDiary</span><span class="p">:</span> <span class="n">ShortDiary</span> <span class="nf">object </span><span class="p">(</span><span class="mi">45</span><span class="p">)</span><span class="o">&gt;</span><span class="p">]</span><span class="o">&gt;</span>
</code></pre></div></div>

<p>위에서 보다시피 <code class="language-plaintext highlighter-rouge">diaries = ShortDiary.objects.filter(user=user).all()</code>를 호출했지만, SQL을 실행한 흔적이 없다, 바로 밑의 <code class="language-plaintext highlighter-rouge">print()</code>를 호출해야 비로소 데이터베이스에 요청이 들어간 것이다. ShortDiary에 있는 데이터를 출력해야 하기 때문이다. 이렇게 꼭 필요한 상황이 되서야 DB에 갔다오기 때문에 <strong>Lazy Loading(게으른 로딩)</strong>이라고 부른다.</p>

<p><br /></p>

<p>하지만 이러한 Lazy Loading 방식은 곧 아래와 같은 문제를 유발하게 된다.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="n">diaries</span> <span class="o">=</span> <span class="n">ShortDiary</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="nf">all</span><span class="p">()</span>
<span class="o">&gt;&gt;&gt;</span> <span class="k">for</span> <span class="n">diary</span> <span class="ow">in</span> <span class="n">diaries</span><span class="p">:</span>
<span class="p">...</span>     <span class="nf">print</span><span class="p">(</span><span class="n">diary</span><span class="p">.</span><span class="n">user</span><span class="p">)</span>
<span class="p">...</span> 

<span class="p">(</span><span class="mf">0.001</span><span class="p">)</span> <span class="n">SELECT</span> <span class="sb">`short_diary`</span><span class="p">.</span><span class="sb">`id`</span><span class="p">,</span> <span class="sb">`short_diary`</span><span class="p">.</span><span class="sb">`user_id`</span><span class="p">,</span> <span class="sb">`short_diary`</span><span class="p">.</span><span class="sb">`title`</span><span class="p">,</span> <span class="sb">`short_diary`</span><span class="p">.</span><span class="sb">`context`</span><span class="p">,</span> <span class="sb">`short_diary`</span><span class="p">.</span><span class="sb">`is_deleted`</span> <span class="n">FROM</span> <span class="sb">`short_diary`</span><span class="p">;</span> <span class="n">args</span><span class="o">=</span><span class="p">();</span> <span class="n">alias</span><span class="o">=</span><span class="n">default</span>
<span class="p">(</span><span class="mf">0.000</span><span class="p">)</span> <span class="n">SELECT</span> <span class="sb">`user`</span><span class="p">.</span><span class="sb">`id`</span><span class="p">,</span> <span class="sb">`user`</span><span class="p">.</span><span class="sb">`password`</span><span class="p">,</span> <span class="sb">`user`</span><span class="p">.</span><span class="sb">`last_login`</span><span class="p">,</span> <span class="sb">`user`</span><span class="p">.</span><span class="sb">`is_superuser`</span><span class="p">,</span> <span class="sb">`user`</span><span class="p">.</span><span class="sb">`email`</span><span class="p">,</span> <span class="sb">`user`</span><span class="p">.</span><span class="sb">`nickname`</span><span class="p">,</span> <span class="sb">`user`</span><span class="p">.</span><span class="sb">`gender`</span><span class="p">,</span> <span class="sb">`user`</span><span class="p">.</span><span class="sb">`is_active`</span> <span class="n">FROM</span> <span class="sb">`user`</span> <span class="n">WHERE</span> <span class="sb">`user`</span><span class="p">.</span><span class="sb">`id`</span> <span class="o">=</span> <span class="mi">20</span> <span class="n">LIMIT</span> <span class="mi">21</span><span class="p">;</span> <span class="n">args</span><span class="o">=</span><span class="p">(</span><span class="mi">20</span><span class="p">,);</span> <span class="n">alias</span><span class="o">=</span><span class="n">default</span>
<span class="n">mccarthydouglas</span><span class="nd">@example.net</span> <span class="o">-</span> <span class="n">debbiecarr</span>
<span class="p">(</span><span class="mf">0.000</span><span class="p">)</span> <span class="n">SELECT</span> <span class="sb">`user`</span><span class="p">.</span><span class="sb">`id`</span><span class="p">,</span> <span class="sb">`user`</span><span class="p">.</span><span class="sb">`password`</span><span class="p">,</span> <span class="sb">`user`</span><span class="p">.</span><span class="sb">`last_login`</span><span class="p">,</span> <span class="sb">`user`</span><span class="p">.</span><span class="sb">`is_superuser`</span><span class="p">,</span> <span class="sb">`user`</span><span class="p">.</span><span class="sb">`email`</span><span class="p">,</span> <span class="sb">`user`</span><span class="p">.</span><span class="sb">`nickname`</span><span class="p">,</span> <span class="sb">`user`</span><span class="p">.</span><span class="sb">`gender`</span><span class="p">,</span> <span class="sb">`user`</span><span class="p">.</span><span class="sb">`is_active`</span> <span class="n">FROM</span> <span class="sb">`user`</span> <span class="n">WHERE</span> <span class="sb">`user`</span><span class="p">.</span><span class="sb">`id`</span> <span class="o">=</span> <span class="mi">20</span> <span class="n">LIMIT</span> <span class="mi">21</span><span class="p">;</span> <span class="n">args</span><span class="o">=</span><span class="p">(</span><span class="mi">20</span><span class="p">,);</span> <span class="n">alias</span><span class="o">=</span><span class="n">default</span>
<span class="n">mccarthydouglas</span><span class="nd">@example.net</span> <span class="o">-</span> <span class="n">debbiecarr</span>
<span class="p">(</span><span class="mf">0.000</span><span class="p">)</span> <span class="n">SELECT</span> <span class="sb">`user`</span><span class="p">.</span><span class="sb">`id`</span><span class="p">,</span> <span class="sb">`user`</span><span class="p">.</span><span class="sb">`password`</span><span class="p">,</span> <span class="sb">`user`</span><span class="p">.</span><span class="sb">`last_login`</span><span class="p">,</span> <span class="sb">`user`</span><span class="p">.</span><span class="sb">`is_superuser`</span><span class="p">,</span> <span class="sb">`user`</span><span class="p">.</span><span class="sb">`email`</span><span class="p">,</span> <span class="sb">`user`</span><span class="p">.</span><span class="sb">`nickname`</span><span class="p">,</span> <span class="sb">`user`</span><span class="p">.</span><span class="sb">`gender`</span><span class="p">,</span> <span class="sb">`user`</span><span class="p">.</span><span class="sb">`is_active`</span> <span class="n">FROM</span> <span class="sb">`user`</span> <span class="n">WHERE</span> <span class="sb">`user`</span><span class="p">.</span><span class="sb">`id`</span> <span class="o">=</span> <span class="mi">20</span> <span class="n">LIMIT</span> <span class="mi">21</span><span class="p">;</span> <span class="n">args</span><span class="o">=</span><span class="p">(</span><span class="mi">20</span><span class="p">,);</span> <span class="n">alias</span><span class="o">=</span><span class="n">default</span>
<span class="n">mccarthydouglas</span><span class="nd">@example.net</span> <span class="o">-</span> <span class="n">debbiecarr</span>
<span class="p">(</span><span class="mf">0.000</span><span class="p">)</span> <span class="n">SELECT</span> <span class="sb">`user`</span><span class="p">.</span><span class="sb">`id`</span><span class="p">,</span> <span class="sb">`user`</span><span class="p">.</span><span class="sb">`password`</span><span class="p">,</span> <span class="sb">`user`</span><span class="p">.</span><span class="sb">`last_login`</span><span class="p">,</span> <span class="sb">`user`</span><span class="p">.</span><span class="sb">`is_superuser`</span><span class="p">,</span> <span class="sb">`user`</span><span class="p">.</span><span class="sb">`email`</span><span class="p">,</span> <span class="sb">`user`</span><span class="p">.</span><span class="sb">`nickname`</span><span class="p">,</span> <span class="sb">`user`</span><span class="p">.</span><span class="sb">`gender`</span><span class="p">,</span> <span class="sb">`user`</span><span class="p">.</span><span class="sb">`is_active`</span> <span class="n">FROM</span> <span class="sb">`user`</span> <span class="n">WHERE</span> <span class="sb">`user`</span><span class="p">.</span><span class="sb">`id`</span> <span class="o">=</span> <span class="mi">20</span> <span class="n">LIMIT</span> <span class="mi">21</span><span class="p">;</span> <span class="n">args</span><span class="o">=</span><span class="p">(</span><span class="mi">20</span><span class="p">,);</span> <span class="n">alias</span><span class="o">=</span><span class="n">default</span>
</code></pre></div></div>

<p>ShortDiary(일기장)를 조회하고. 각각의 일기장을 누가 썼는지 출력 하는 코드다. RAW Query라면 JOIN문 한번에 가져올 수 있지만 여기는 ORM이다. Lazy Loading 방식이기 때문에 일기장 주인(User)을 출력하기 전 까지 아무것도 안하다가. 출력하는 순간(<code class="language-plaintext highlighter-rouge">print(diary.user)</code>)이 되서야 SQL문을 날린다. 이걸 일기 갯수(diaries)대로 반복을 하게 되고 결국 N + 1 Problem이 발생하게 된다. 결국 DB에 불필요한 요청을 보내는 꼴이 되고, 이는 서버와 DB 둘다 불필요한 트래픽으로 인해 성능저하가 발생하게 된다.</p>

<p><br /></p>

<p>하지만 ORM은 이러한 이슈가 계속 발생이 되도록 방관하지 않는다. 빠져나갈 방법은 있다.</p>

<h1 id="해결-방법">해결 방법</h1>

<p>사실 해결 방법은 간단하다. JOIN을 사용하면 된다. 이렇게 되면 쿼리문 1번으로 끝내는 것이 가능하다. 하지만 여기는 RAW Query가 아닌 ORM이기 때문에 다른 방법을 사용해야 한다. Django에서는 <strong>select_related</strong>와 <strong>prefetch_related</strong>를 지원한다. <code class="language-plaintext highlighter-rouge">select_related</code>는 JOIN문 1번으로 모든 데이터르들을 한꺼번에 불러오고, <code class="language-plaintext highlighter-rouge">prefetch_related</code>는 상위 테이블 한번, 그 상위 테이블에서 조회된 고유키를 가지고 하위 테이블 조회 함으로써 총 2번 요청을 한다. 이렇게 Lazy Loading이 아닌, 미리미리 데이터를 불러와서 활용하는 방식을 <strong>Eager Loading</strong> 이라고 한다.</p>

<h2 id="모델-구조">모델 구조</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">User</span><span class="p">(</span><span class="n">models</span><span class="p">.</span><span class="n">Model</span><span class="p">):</span>
    <span class="k">class</span> <span class="nc">Meta</span><span class="p">:</span>
        <span class="n">db_table</span> <span class="o">=</span> <span class="sh">"</span><span class="s">user</span><span class="sh">"</span>

    <span class="n">GENDER_CODE</span> <span class="o">=</span> <span class="p">(</span>
        <span class="p">(</span><span class="sh">"</span><span class="s">M</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">Male</span><span class="sh">"</span><span class="p">),</span>
        <span class="p">(</span><span class="sh">"</span><span class="s">F</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">Female</span><span class="sh">"</span><span class="p">),</span>
    <span class="p">)</span>

    <span class="n">email</span> <span class="o">=</span> <span class="n">models</span><span class="p">.</span><span class="nc">EmailField</span><span class="p">(</span><span class="n">null</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">max_length</span><span class="o">=</span><span class="mi">256</span><span class="p">,</span> <span class="n">verbose_name</span><span class="o">=</span><span class="sh">"</span><span class="s">이메일</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">nickname</span> <span class="o">=</span> <span class="n">models</span><span class="p">.</span><span class="nc">CharField</span><span class="p">(</span><span class="n">null</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">unique</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">max_length</span><span class="o">=</span><span class="mi">16</span><span class="p">,</span> <span class="n">verbose_name</span><span class="o">=</span><span class="sh">"</span><span class="s">닉네임</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">gender</span> <span class="o">=</span> <span class="n">models</span><span class="p">.</span><span class="nc">CharField</span><span class="p">(</span><span class="n">null</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">choices</span><span class="o">=</span><span class="n">GENDER_CODE</span><span class="p">,</span> <span class="n">max_length</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">verbose_name</span><span class="o">=</span><span class="sh">"</span><span class="s">성별</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">is_active</span> <span class="o">=</span> <span class="n">models</span><span class="p">.</span><span class="nc">BooleanField</span><span class="p">(</span><span class="n">null</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">verbose_name</span><span class="o">=</span><span class="sh">"</span><span class="s">활성화 여부</span><span class="sh">"</span><span class="p">)</span>


<span class="k">class</span> <span class="nc">ShortDiary</span><span class="p">(</span><span class="n">models</span><span class="p">.</span><span class="n">Model</span><span class="p">):</span>
    <span class="k">class</span> <span class="nc">Meta</span><span class="p">:</span>
        <span class="n">db_table</span> <span class="o">=</span> <span class="sh">"</span><span class="s">short_diary</span><span class="sh">"</span>

    <span class="n">user</span> <span class="o">=</span> <span class="n">models</span><span class="p">.</span><span class="nc">ForeignKey</span><span class="p">(</span><span class="n">User</span><span class="p">,</span> <span class="n">related_name</span><span class="o">=</span><span class="sh">"</span><span class="s">short_diaries</span><span class="sh">"</span><span class="p">,</span> <span class="n">on_delete</span><span class="o">=</span><span class="n">models</span><span class="p">.</span><span class="n">CASCADE</span><span class="p">)</span>
    <span class="n">title</span> <span class="o">=</span> <span class="n">models</span><span class="p">.</span><span class="nc">CharField</span><span class="p">(</span><span class="n">null</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">max_length</span><span class="o">=</span><span class="mi">256</span><span class="p">)</span>
    <span class="n">context</span> <span class="o">=</span> <span class="n">models</span><span class="p">.</span><span class="nc">CharField</span><span class="p">(</span><span class="n">null</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">max_length</span><span class="o">=</span><span class="mi">1024</span><span class="p">)</span>
    <span class="n">is_deleted</span> <span class="o">=</span> <span class="n">models</span><span class="p">.</span><span class="nc">BooleanField</span><span class="p">(</span><span class="n">null</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="select_related">select_related</h2>

<p>정참조 또는 1대1에서 주로 사용되는 함수다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="n">diaries</span> <span class="o">=</span> <span class="n">ShortDiary</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="nf">select_related</span><span class="p">(</span><span class="sh">"</span><span class="s">user</span><span class="sh">"</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="k">for</span> <span class="n">diary</span> <span class="ow">in</span> <span class="n">diaries</span><span class="p">:</span>
<span class="p">...</span>     <span class="nf">print</span><span class="p">(</span><span class="n">diary</span><span class="p">.</span><span class="n">user</span><span class="p">)</span>
<span class="p">...</span> 

<span class="p">(</span><span class="mf">0.001</span><span class="p">)</span> <span class="n">SELECT</span> <span class="sb">`short_diary`</span><span class="p">.</span><span class="sb">`id`</span><span class="p">,</span> <span class="sb">`short_diary`</span><span class="p">.</span><span class="sb">`user_id`</span><span class="p">,</span> <span class="sb">`short_diary`</span><span class="p">.</span><span class="sb">`title`</span><span class="p">,</span> <span class="sb">`short_diary`</span><span class="p">.</span><span class="sb">`context`</span><span class="p">,</span> <span class="sb">`short_diary`</span><span class="p">.</span><span class="sb">`is_deleted`</span><span class="p">,</span> <span class="sb">`user`</span><span class="p">.</span><span class="sb">`id`</span><span class="p">,</span> <span class="sb">`user`</span><span class="p">.</span><span class="sb">`password`</span><span class="p">,</span> <span class="sb">`user`</span><span class="p">.</span><span class="sb">`last_login`</span><span class="p">,</span> <span class="sb">`user`</span><span class="p">.</span><span class="sb">`is_superuser`</span><span class="p">,</span> <span class="sb">`user`</span><span class="p">.</span><span class="sb">`email`</span><span class="p">,</span> <span class="sb">`user`</span><span class="p">.</span><span class="sb">`nickname`</span><span class="p">,</span> <span class="sb">`user`</span><span class="p">.</span><span class="sb">`gender`</span><span class="p">,</span> <span class="sb">`user`</span><span class="p">.</span><span class="sb">`is_active`</span> <span class="n">FROM</span> <span class="sb">`short_diary`</span> <span class="n">INNER</span> <span class="n">JOIN</span> <span class="sb">`user`</span> <span class="nc">ON </span><span class="p">(</span><span class="sb">`short_diary`</span><span class="p">.</span><span class="sb">`user_id`</span> <span class="o">=</span> <span class="sb">`user`</span><span class="p">.</span><span class="sb">`id`</span><span class="p">);</span> <span class="n">args</span><span class="o">=</span><span class="p">();</span> <span class="n">alias</span><span class="o">=</span><span class="n">default</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">select_related</code>는 <code class="language-plaintext highlighter-rouge">JOIN</code>을 이용해서 문제를 해결한다. 위의 예시에서는 일기를 작성한 사용자(User)의 정보를 가져오는 코드이다. 사용된 쿼리문은 <code class="language-plaintext highlighter-rouge">JOIN</code>문 딱 하나다.</p>

<h3 id="작동이-안되는-경우">작동이 안되는 경우</h3>

<p>반대로 사용자가 어떤 일기를 썼는지 조회하는 경우도 있을 수 있다. 즉 1대다 상황이 되는데, 이때 <code class="language-plaintext highlighter-rouge">select_related</code>를 사용하게 되면 아래와 같은 에러가 발생하게 된다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="n">users</span> <span class="o">=</span> <span class="n">User</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="nf">select_related</span><span class="p">(</span><span class="sh">'</span><span class="s">short_diaries</span><span class="sh">'</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="k">for</span> <span class="n">user</span> <span class="ow">in</span> <span class="n">users</span><span class="p">:</span>
<span class="p">...</span>     <span class="nf">print</span><span class="p">(</span><span class="n">user</span><span class="p">.</span><span class="n">__dict__</span><span class="p">)</span>

<span class="n">django</span><span class="p">.</span><span class="n">core</span><span class="p">.</span><span class="n">exceptions</span><span class="p">.</span><span class="n">FieldError</span><span class="p">:</span> <span class="n">Invalid</span> <span class="n">field</span> <span class="nf">name</span><span class="p">(</span><span class="n">s</span><span class="p">)</span> <span class="n">given</span> <span class="ow">in</span> <span class="n">select_related</span><span class="p">:</span> <span class="sh">'</span><span class="s">short_diaries</span><span class="sh">'</span><span class="p">.</span> <span class="n">Choices</span> <span class="n">are</span><span class="p">:</span> <span class="p">(</span><span class="n">none</span><span class="p">)</span>
</code></pre></div></div>

<p>short_diaries라는 이름의 field name이 없다는 문구가 뜬다. User Model에 선언된 멤버변수 들 중 short_diaries라는 이름의 변수는 없기 때문이다. 이 경우, prefetch_related를 사용해야 한다.</p>

<h2 id="prefetch_related">prefetch_related</h2>

<p>상위 테이블 조회 1번, 하위 테이블 조회 1번, 총 2번 요청을 한다.
1대다, 다대다나 역참조에서 주로 사용된다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="n">users</span> <span class="o">=</span> <span class="n">User</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="nf">prefetch_related</span><span class="p">(</span><span class="sh">"</span><span class="s">short_diaries</span><span class="sh">"</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="k">for</span> <span class="n">user</span> <span class="ow">in</span> <span class="n">users</span><span class="p">:</span>
<span class="p">...</span>     <span class="nf">print</span><span class="p">(</span><span class="n">user</span><span class="p">.</span><span class="n">short_diaries</span><span class="p">)</span>
<span class="p">...</span> 
<span class="p">(</span><span class="mf">0.001</span><span class="p">)</span> <span class="n">SELECT</span> <span class="sb">`user`</span><span class="p">.</span><span class="sb">`id`</span><span class="p">,</span> <span class="sb">`user`</span><span class="p">.</span><span class="sb">`password`</span><span class="p">,</span> <span class="sb">`user`</span><span class="p">.</span><span class="sb">`last_login`</span><span class="p">,</span> <span class="sb">`user`</span><span class="p">.</span><span class="sb">`is_superuser`</span><span class="p">,</span> <span class="sb">`user`</span><span class="p">.</span><span class="sb">`email`</span><span class="p">,</span> <span class="sb">`user`</span><span class="p">.</span><span class="sb">`nickname`</span><span class="p">,</span> <span class="sb">`user`</span><span class="p">.</span><span class="sb">`gender`</span><span class="p">,</span> <span class="sb">`user`</span><span class="p">.</span><span class="sb">`is_active`</span> <span class="n">FROM</span> <span class="sb">`user`</span><span class="p">;</span> <span class="n">args</span><span class="o">=</span><span class="p">();</span> <span class="n">alias</span><span class="o">=</span><span class="n">default</span>
<span class="p">(</span><span class="mf">0.000</span><span class="p">)</span> <span class="n">SELECT</span> <span class="sb">`short_diary`</span><span class="p">.</span><span class="sb">`id`</span><span class="p">,</span> <span class="sb">`short_diary`</span><span class="p">.</span><span class="sb">`user_id`</span><span class="p">,</span> <span class="sb">`short_diary`</span><span class="p">.</span><span class="sb">`title`</span><span class="p">,</span> <span class="sb">`short_diary`</span><span class="p">.</span><span class="sb">`context`</span><span class="p">,</span> <span class="sb">`short_diary`</span><span class="p">.</span><span class="sb">`is_deleted`</span> <span class="n">FROM</span> <span class="sb">`short_diary`</span> <span class="n">WHERE</span> <span class="sb">`short_diary`</span><span class="p">.</span><span class="sb">`user_id`</span> <span class="nc">IN </span><span class="p">(</span><span class="mi">24</span><span class="p">,</span> <span class="mi">25</span><span class="p">);</span> <span class="n">args</span><span class="o">=</span><span class="p">(</span><span class="mi">24</span><span class="p">,</span> <span class="mi">25</span><span class="p">);</span> <span class="n">alias</span><span class="o">=</span><span class="n">default</span>
</code></pre></div></div>
<p><code class="language-plaintext highlighter-rouge">select_related</code>에서는 되지 않았던 역참조가 <code class="language-plaintext highlighter-rouge">prefetch_related</code> 에서는 정상작동이 되었다.</p>

<h1 id="사용시-주의해야-할-점">사용시 주의해야 할 점</h1>

<h2 id="prefetch_related-와-함께-하위-테이블에-대한-정렬을-하려는-경우">prefetch_related 와 함께 하위 테이블에 대한 정렬을 하려는 경우</h2>

<p>간혹 하위 테이블을 기준으로 정렬을 하려는 경우가 있다. 그런데 위에서 언급했다시피 prefetch_related는 역참조 또는 1..n대다에서 사용되는 함수다. 즉, 하위 테이블의 데이터가 여러개 존재할 수 있다는 얘기가 된다. 결국, 하위 테이블의 모든 데이터들을 참조할 수 밖에 없고, 그 결과 <strong>하위 테이블의 갯수대로 상위 테이블 데이터가 중복이 된다.</strong> 따라서 prefetch_related를 사용할 경우, 하위 테이블을 기준으로 정렬하는 것을 권장하지 않고, 어쩔 수 없이 사용하게 된다면, 쿼리 결과를 그대로 사용하는게 아니라 별도의 로직을 통해 데이터를 가공해야 할 필요가 있다.</p>

<h3 id="예시">예시</h3>

<ul>
  <li>각 User에는 5개의 ShortDiary가 있음</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">users</span> <span class="o">=</span> <span class="n">User</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="nf">prefetch_related</span><span class="p">(</span><span class="sh">"</span><span class="s">short_diaries</span><span class="sh">"</span><span class="p">).</span><span class="nf">all</span><span class="p">()</span>
<span class="n">prefetched_users</span> <span class="o">=</span> <span class="n">User</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="nf">prefetch_related</span><span class="p">(</span><span class="sh">"</span><span class="s">short_diaries</span><span class="sh">"</span><span class="p">).</span><span class="nf">order_by</span><span class="p">(</span><span class="sh">"</span><span class="s">short_diaries__id</span><span class="sh">"</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Users: </span><span class="si">{</span><span class="nf">len</span><span class="p">(</span><span class="n">users</span><span class="p">)</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Prefetched Users: </span><span class="si">{</span><span class="nf">len</span><span class="p">(</span><span class="n">prefetched_users</span><span class="p">)</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>

<span class="c1"># 결과
</span><span class="n">Users</span><span class="p">:</span> <span class="mi">2</span>
<span class="n">Prefetched</span> <span class="n">Users</span><span class="p">:</span> <span class="mi">10</span> <span class="c1"># 2 x 5 = 10
</span></code></pre></div></div>

<h3 id="first-get-사용">first(), get() 사용</h3>

<p>참조된 하위 테이블 중 가장 위에 있는 데이터를 사용하기 위해 <code class="language-plaintext highlighter-rouge">first()</code> 또는 <code class="language-plaintext highlighter-rouge">get()</code>을 사용을 하는 경우가 생기는데, 이 두개의 함수를 사용하게 되면 Eager Loading을 했음에도 불구하고 다시 N + 1 Problem 이 발생하는 사고가 생긴다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">users</span> <span class="o">=</span> <span class="n">User</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="nf">prefetch_related</span><span class="p">(</span><span class="sh">"</span><span class="s">short_diaries</span><span class="sh">"</span><span class="p">)</span>
<span class="k">for</span> <span class="n">user</span> <span class="ow">in</span> <span class="n">users</span><span class="p">:</span>
    <span class="n">diary</span> <span class="o">=</span> <span class="n">user</span><span class="p">.</span><span class="n">short_diaries</span><span class="p">.</span><span class="nf">first</span><span class="p">()</span>
    <span class="nf">print</span><span class="p">(</span><span class="n">diary</span><span class="p">.</span><span class="n">title</span><span class="p">)</span>

<span class="p">(</span><span class="mf">0.000</span><span class="p">)</span> <span class="n">SELECT</span> <span class="sb">`user`</span><span class="p">.</span><span class="sb">`id`</span><span class="p">,</span> <span class="sb">`user`</span><span class="p">.</span><span class="sb">`password`</span><span class="p">,</span> <span class="sb">`user`</span><span class="p">.</span><span class="sb">`last_login`</span><span class="p">,</span> <span class="sb">`user`</span><span class="p">.</span><span class="sb">`is_superuser`</span><span class="p">,</span> <span class="sb">`user`</span><span class="p">.</span><span class="sb">`email`</span><span class="p">,</span> <span class="sb">`user`</span><span class="p">.</span><span class="sb">`nickname`</span><span class="p">,</span> <span class="sb">`user`</span><span class="p">.</span><span class="sb">`gender`</span><span class="p">,</span> <span class="sb">`user`</span><span class="p">.</span><span class="sb">`is_active`</span> <span class="n">FROM</span> <span class="sb">`user`</span><span class="p">;</span> <span class="n">args</span><span class="o">=</span><span class="p">();</span> <span class="n">alias</span><span class="o">=</span><span class="n">default</span>
<span class="p">(</span><span class="mf">0.000</span><span class="p">)</span> <span class="n">SELECT</span> <span class="sb">`short_diary`</span><span class="p">.</span><span class="sb">`id`</span><span class="p">,</span> <span class="sb">`short_diary`</span><span class="p">.</span><span class="sb">`user_id`</span><span class="p">,</span> <span class="sb">`short_diary`</span><span class="p">.</span><span class="sb">`title`</span><span class="p">,</span> <span class="sb">`short_diary`</span><span class="p">.</span><span class="sb">`context`</span><span class="p">,</span> <span class="sb">`short_diary`</span><span class="p">.</span><span class="sb">`is_deleted`</span> <span class="n">FROM</span> <span class="sb">`short_diary`</span> <span class="n">WHERE</span> <span class="sb">`short_diary`</span><span class="p">.</span><span class="sb">`user_id`</span> <span class="nc">IN </span><span class="p">(</span><span class="mi">26</span><span class="p">,</span> <span class="mi">27</span><span class="p">);</span> <span class="n">args</span><span class="o">=</span><span class="p">(</span><span class="mi">26</span><span class="p">,</span> <span class="mi">27</span><span class="p">);</span> <span class="n">alias</span><span class="o">=</span><span class="n">default</span>

<span class="c1"># User 갯수대로 추가 SQL문 요청 
</span><span class="p">(</span><span class="mf">0.000</span><span class="p">)</span> <span class="n">SELECT</span> <span class="sb">`short_diary`</span><span class="p">.</span><span class="sb">`id`</span><span class="p">,</span> <span class="sb">`short_diary`</span><span class="p">.</span><span class="sb">`user_id`</span><span class="p">,</span> <span class="sb">`short_diary`</span><span class="p">.</span><span class="sb">`title`</span><span class="p">,</span> <span class="sb">`short_diary`</span><span class="p">.</span><span class="sb">`context`</span><span class="p">,</span> <span class="sb">`short_diary`</span><span class="p">.</span><span class="sb">`is_deleted`</span> <span class="n">FROM</span> <span class="sb">`short_diary`</span> <span class="n">WHERE</span> <span class="sb">`short_diary`</span><span class="p">.</span><span class="sb">`user_id`</span> <span class="o">=</span> <span class="mi">26</span> <span class="n">ORDER</span> <span class="n">BY</span> <span class="sb">`short_diary`</span><span class="p">.</span><span class="sb">`id`</span> <span class="n">ASC</span> <span class="n">LIMIT</span> <span class="mi">1</span><span class="p">;</span> <span class="n">args</span><span class="o">=</span><span class="p">(</span><span class="mi">26</span><span class="p">,);</span> <span class="n">alias</span><span class="o">=</span><span class="n">default</span>
<span class="n">radio</span>
<span class="p">(</span><span class="mf">0.000</span><span class="p">)</span> <span class="n">SELECT</span> <span class="sb">`short_diary`</span><span class="p">.</span><span class="sb">`id`</span><span class="p">,</span> <span class="sb">`short_diary`</span><span class="p">.</span><span class="sb">`user_id`</span><span class="p">,</span> <span class="sb">`short_diary`</span><span class="p">.</span><span class="sb">`title`</span><span class="p">,</span> <span class="sb">`short_diary`</span><span class="p">.</span><span class="sb">`context`</span><span class="p">,</span> <span class="sb">`short_diary`</span><span class="p">.</span><span class="sb">`is_deleted`</span> <span class="n">FROM</span> <span class="sb">`short_diary`</span> <span class="n">WHERE</span> <span class="sb">`short_diary`</span><span class="p">.</span><span class="sb">`user_id`</span> <span class="o">=</span> <span class="mi">27</span> <span class="n">ORDER</span> <span class="n">BY</span> <span class="sb">`short_diary`</span><span class="p">.</span><span class="sb">`id`</span> <span class="n">ASC</span> <span class="n">LIMIT</span> <span class="mi">1</span><span class="p">;</span> <span class="n">args</span><span class="o">=</span><span class="p">(</span><span class="mi">27</span><span class="p">,);</span> <span class="n">alias</span><span class="o">=</span><span class="n">default</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">diary = user.short_diaries.first()</code>에서 short_diary 테이블을 한번 더 조회하고 있다. 즉, 유저 갯수 마다 short_diary를 한번 씩 데이터베이스에 직접 조회하고 있다는 것이다. 그렇기 때문에 <code class="language-plaintext highlighter-rouge">first()</code> 대신 <code class="language-plaintext highlighter-rouge">all()[0]</code> 을 사용해야 한다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">users</span> <span class="o">=</span> <span class="n">User</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="nf">prefetch_related</span><span class="p">(</span><span class="sh">"</span><span class="s">short_diaries</span><span class="sh">"</span><span class="p">)</span>
<span class="k">for</span> <span class="n">user</span> <span class="ow">in</span> <span class="n">users</span><span class="p">:</span>
    <span class="n">diary</span> <span class="o">=</span> <span class="n">user</span><span class="p">.</span><span class="n">short_diaries</span><span class="p">.</span><span class="nf">all</span><span class="p">()[</span><span class="mi">0</span><span class="p">]</span>
    <span class="nf">print</span><span class="p">(</span><span class="n">diary</span><span class="p">.</span><span class="n">title</span><span class="p">)</span>

<span class="p">(</span><span class="mf">0.000</span><span class="p">)</span> <span class="n">SELECT</span> <span class="sb">`user`</span><span class="p">.</span><span class="sb">`id`</span><span class="p">,</span> <span class="sb">`user`</span><span class="p">.</span><span class="sb">`password`</span><span class="p">,</span> <span class="sb">`user`</span><span class="p">.</span><span class="sb">`last_login`</span><span class="p">,</span> <span class="sb">`user`</span><span class="p">.</span><span class="sb">`is_superuser`</span><span class="p">,</span> <span class="sb">`user`</span><span class="p">.</span><span class="sb">`email`</span><span class="p">,</span> <span class="sb">`user`</span><span class="p">.</span><span class="sb">`nickname`</span><span class="p">,</span> <span class="sb">`user`</span><span class="p">.</span><span class="sb">`gender`</span><span class="p">,</span> <span class="sb">`user`</span><span class="p">.</span><span class="sb">`is_active`</span> <span class="n">FROM</span> <span class="sb">`user`</span><span class="p">;</span> <span class="n">args</span><span class="o">=</span><span class="p">();</span> <span class="n">alias</span><span class="o">=</span><span class="n">default</span>
<span class="p">(</span><span class="mf">0.000</span><span class="p">)</span> <span class="n">SELECT</span> <span class="sb">`short_diary`</span><span class="p">.</span><span class="sb">`id`</span><span class="p">,</span> <span class="sb">`short_diary`</span><span class="p">.</span><span class="sb">`user_id`</span><span class="p">,</span> <span class="sb">`short_diary`</span><span class="p">.</span><span class="sb">`title`</span><span class="p">,</span> <span class="sb">`short_diary`</span><span class="p">.</span><span class="sb">`context`</span><span class="p">,</span> <span class="sb">`short_diary`</span><span class="p">.</span><span class="sb">`is_deleted`</span> <span class="n">FROM</span> <span class="sb">`short_diary`</span> <span class="n">WHERE</span> <span class="sb">`short_diary`</span><span class="p">.</span><span class="sb">`user_id`</span> <span class="nc">IN </span><span class="p">(</span><span class="mi">26</span><span class="p">,</span> <span class="mi">27</span><span class="p">);</span> <span class="n">args</span><span class="o">=</span><span class="p">(</span><span class="mi">26</span><span class="p">,</span> <span class="mi">27</span><span class="p">);</span> <span class="n">alias</span><span class="o">=</span><span class="n">default</span>
<span class="n">radio</span>
<span class="n">man</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="Django" /><category term="django" /><category term="database" /><summary type="html"><![CDATA[개요]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://recoma96.github.io/" /><media:content medium="image" url="https://recoma96.github.io/" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">EC2 인스턴스 유형 변경하기</title><link href="https://recoma96.github.io/aws/2024/11/28/change-type-of-ec2-instance.html" rel="alternate" type="text/html" title="EC2 인스턴스 유형 변경하기" /><published>2024-11-28T23:00:00+00:00</published><updated>2024-11-28T23:00:00+00:00</updated><id>https://recoma96.github.io/aws/2024/11/28/change-type-of-ec2-instance</id><content type="html" xml:base="https://recoma96.github.io/aws/2024/11/28/change-type-of-ec2-instance.html"><![CDATA[<h1 id="개요">개요</h1>

<p>사이드 프로젝트나 실무에서 대부분 서버를 돌릴 때 AWS EC2 인스턴스를 사용한다. 그런데, 사용하다 보면 인스턴스의 스펙을 올리거나 내려야 할 상황이 생긴다. 예를 들어 운영하고 있는 서버에 사용자가 증가하면서 트래픽이 많아지게 되고, 트래픽이 많아지게 되면서 CPU, RAM 사용량이 기하급수적으로 증가하게 된다면, 인스턴스 스펙을 올리는 <strong>스케일 업(Scale Up)</strong>을 고려해야 한다. (로드밸런싱을 적극 사용하고 있다면 서버 대수를 늘리는 <strong>스케일 (Scale Out)</strong>을 할 수도 있겠지만. 이번 포스트에서는 이게 주제가 아니므로 패스…). 혹은 사용 대비 비용이 너무 많이 들어가 돈낭비가 지속된다면 반대로 서버 스펙을 줄일 필요가 있다.</p>

<p><br /></p>

<p>순수 자체 구축된 컴퓨터를 사용하고 있다면, CPU또는 RAM을 직접 갈아끼워야 하는 수고가 만만치 않은 데다, 마더보드하고 호환되지 않을 경우 전체를 다 들어내야 하는 등, 많은 인력이 소모될 것이다. 하지만 AWS, Azure 같은 클라우드 서비스를 사용하고 있다면, 마우스 몇번 깔딱으로 스펙을 바꿀 수가 있다. 이번 포스트에서는 EC2의 유형을 변경하는 방법에 대해 설명한다.</p>

<h1 id="ec2-유형-변경하기">EC2 유형 변경하기</h1>

<h2 id="변경-전-점검사항">변경 전 점검사항</h2>

<p>EC2 유형을 변경한다는 것은 마치 본체를 갈아 끼운다는 것과 같다. 그렇기 때문에 유형을 변경하기에 앞서 몇가지 점검해야 할 사항이 있다.</p>

<h3 id="public-ip-변동-여부">Public IP 변동 여부</h3>

<p>EC2를 사용해 봤다면 당연히 알고있겠지만, 유형을 변경하기에 앞서 서버를 내리게 된다. 그리고 다시 올리게 되면 Public IP가 변경된다. Elastic IP를 사용하고 있다면 문제가 없겠지만, 그렇지 않다면 <strong>IP가 바뀜으로서, 영향이 가는 AWS 서비스가 있는지 검토해야 한다.</strong> 대표적으로 여러 인스턴스들을 연동해서 트래픽 분산을 해주는 ALB(어플리케이션 로드밸런싱)가 있고, 해당 서버와 통신하고 있는 다른 서버 및 클라이언트가 이에 해당된다. 단, ALB를 포함한 다른 AWS 서비스들이 EC2를 연동할 때 IP가 아닌 Instance ID를 사용하고 있다면 IP가 어떻게 바뀌든 간에 영향이 가지 않는다.</p>

<h3 id="ec2-내의-스토리지디스크가-ebs인지-확인하기">EC2 내의 스토리지(디스크)가 EBS인지 확인하기</h3>

<p>EC2의 스토리지 유형은 크게 두 가지가 있다. 하나는 <strong>EBS(Elastic Block Store)</strong>이고 다른 하나는 <strong>인스턴스 스토리지(Instance Storage)</strong>이다. EBS는 EC2와 분리되어 있는 하드디스크 개념으로 EC2가 종료되어도 EBS에 있는 내용은 변경사항이 없지만, 인스턴스 스토리지는 말 그대로 EC2내 부착되는 스토리지이기 때문에 EC2를 종료하는 순간 모든 데이터가 사라지게 된다. 따라서 후술하겠지만, <strong>인스턴스 변경에 앞서 데이터에 대한 백업이 반드시 필요하다.</strong></p>

<p><br /></p>

<p>EC2가 사용하고 있는 스토리지의 유형을 확인하는 방법은 아래와 같다.</p>

<ol>
  <li>EC2 접속</li>
  <li>명령어 <code class="language-plaintext highlighter-rouge">sudo apt install nvme-list</code> 실행</li>
  <li>명령어 <code class="language-plaintext highlighter-rouge">nvme list</code> 실행</li>
</ol>

<p><code class="language-plaintext highlighter-rouge">nvme list</code>를 실행하면 보통 아래와 같이 터미널에 출력이 된다.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Node           SN                  Model                                    
<span class="nt">-------------</span> <span class="nt">--------------------</span> <span class="nt">---------------------------</span>
/dev/nvme0n1  vol074ab31681a94fc83 Amazon Elastic Block Store              
</code></pre></div></div>

<p><br /></p>

<p>Model 부분에서 <code class="language-plaintext highlighter-rouge">Amazon Elastic Block Store</code>라고 출력되어있다면 EBS가 되고, 그렇지 않다면 인스턴스 스토리지다.</p>

<h3 id="아키텍처-체크">아키텍처 체크</h3>

<p><img src="/assets/img/20241129/arch-list.png" alt="arch-list" /></p>

<p>CPU 아키텍처가 Intel x86인지 AMD인지 아니면 다른 것인지 파악을 해야 한다. 유형에 따라 아키텍처가 달라지는데, 이를 고려하지 않고 변경을 하게 된다면, 서비스 운영에 있어 장애를 경험할 수 있다. 예를 들어 Docker의 경우, ARM 계열의 MacOS에서 DockerFile로 이미지를 만들고 x86 계열의 EC2 인스턴스에서 해당 이미지를 생성해서 사용하려면 DockerFile의 맨 위에 아래와 같이 작성해야 한다. 아키텍처가 서로 다르기 때문이다.</p>

<div class="language-dockerfile highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">FROM</span><span class="s"> --platform=linux/amd64 &lt;이미지 유형&gt;</span>
</code></pre></div></div>

<h2 id="백업본-만들기-ebs-기준">백업본 만들기 (EBS 기준)</h2>

<p>앞서 서술했듯이 인스턴스를 갈아까우면서 스토리지 상에서 혹여 발생하는 문제들에 대해 대비하기 위해 백업본을 미리 만들어야 한다. EBS와 인스턴스 스토리지 둘다 해당이 되지만, 대부분 EBS를 사용하기 때문에 EBS 위주로 설명한다.</p>

<ol>
  <li>ECS Instances에서 Instance ID를 클릭한다.
<img src="/assets/img/20241129/backup-1.png" alt="backup-1" /></li>
  <li>Storage 탭에서 Volume ID를 클릭한다.
 <img src="/assets/img/20241129/backup-2.png" alt="backup-2" /></li>
  <li>Action 탭에 Create snapshot을 클릭한다.
 <img src="/assets/img/20241129/backup-3.png" alt="backup-3" /></li>
  <li>필요한 설명을 적고 하단의 Create Snapshot을 클릭하면.
 <img src="/assets/img/20241129/backup-4.png" alt="backup-4" /></li>
  <li>EBS의 백업본인 Snapshot이 하나 추가가 되고, “Create volume” 버튼을 통해 언제든지 백업본을 생성할 수 있다.
<img src="/assets/img/20241129/backup-5.png" alt="backup-5" /></li>
</ol>

<h2 id="ec2-유형-변경하기-1"><strong>EC2 유형 변경하기</strong></h2>

<ol>
  <li>유형을 변경하기에 앞서 EC2 인스턴스를 Stop(멈춤) 한다. <strong>절대 Terminate(종료)를 해서는 안된다.</strong>
 <img src="/assets/img/20241129/change-1.png" alt="change-1" /></li>
  <li>actions -&gt; instance settings -&gt; change instance type 으로 진행한다.
 <img src="/assets/img/20241129/change-2.png" alt="change-2" /></li>
  <li>이제 원하는 인스턴스 유형을 고른다. 변경 전과 이후의 인스턴스 스펙 리스트가 있으니 꼭 확인하자. 결정이 됐으면 하단의 Change 버튼을 누른다.
 <img src="/assets/img/20241129/change-3.png" alt="change-3" /></li>
  <li>변경 성공, 이제 인스턴스를 켜서 데이터가 그대로 있는지, 서비스가 정상작동이 되는지 확인을 하면 된다.
 <img src="/assets/img/20241129/change-4.png" alt="change-4" /></li>
</ol>

<h1 id="마치며">마치며</h1>

<p>서비스를 운영하다 보면 사용자 및 트래픽의 증가에 따라, 혹은 비용 절감을 위해 서버 인스턴스의 스펙을 올리거나 내리는 순간이 꼭 한번쯤은 찾아온다. 현장에서 직접 서버의 스펙을 바꾸려면, 본체내 장비들을 일일이 교체해야 함은 물론, 교체 이후의 세팅을 일일이 해야 한다. 하지만, AWS EC2는 이러한 작업을 고작 마우스 딸깍 몇번으로 해결을 해준다.</p>

<p><br /></p>

<p>그러나, 이런 행위는 사실상 서버 본체를 갈아끼우는 것과 같기 때문에, 내부 스토리지의 데이터가 초기화 되거나, Public IP가 뒤바뀌면서, 서비스 작동에 장애를 안겨줄 수 있다. 그렇기 때문에 <strong>AWS EC2 인스턴스 스펙을 바꾸기 전에, 바뀌게 되면 영향이 가는 요소들을 반드시 확인하고, 변경 이후에도 서비스가 정상작동을 하는지에 대한 모니터링이 정말정말 필요하다.</strong></p>]]></content><author><name></name></author><category term="AWS" /><category term="aws" /><category term="ec2" /><summary type="html"><![CDATA[개요]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://recoma96.github.io/" /><media:content medium="image" url="https://recoma96.github.io/" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>